start-symbol: file

include: {{
	#include <any>
	#include <memory>
	#include <type_traits>
	#include <utility>

	#include <gsl/gsl>

	#include "../string_heap.h"
	#include "../ast/ast.h"
	#include "parse_globals.h"
}}

code: {{
	using namespace idlc;
	using namespace idlc::parser;

	template<typename type>
	type to_int(const Value& v)
	{
		// FIXME: I know, precision bug
		static_assert(std::is_arithmetic_v<type> || std::is_enum_v<type>);
		return gsl::narrow<type>(reinterpret_cast<std::uintptr_t>(v.getValue()));
	}

	template<typename type>
	type to_ptr(const Value& v)
	{
		return static_cast<type>(const_cast<void*>(v.getValue()));
	}

	template<typename type>
	auto share(type&& v)
	{
		const auto ptr = std::make_shared<std::decay_t<type>>(std::forward<type>(v));
		parser_objs.emplace_back(ptr);
		return reinterpret_cast<const void*>(parser_objs.size() - 1);
	}

	template<typename type>
	std::shared_ptr<type> get_shared(const Value& v)
	{
		if (!v.getValue()) {
			return nullptr;
		}

		const auto id = to_int<std::size_t>(v);
		return std::any_cast<std::shared_ptr<type>>(gsl::at(parser_objs, id));
	}
}}

# Our design is simple: we keep a parser-global vector of shared_ptrs to every node we ever build, ensuring that cached
# nodes live long enough

rules:

# LEXING: These are the logical "tokens" of the language

tok_kw_const = "const"
tok_kw_void = "void"
tok_kw_string = "string"
tok_kw_projection = "projection"
tok_kw_rpc = "rpc"
tok_kw_rpc_ptr = "rpc_ptr"
tok_kw_rpc_export = "rpc_export"
tok_kw_driver = "driver"
tok_kw_module = "module"
tok_kw_header = "header"
tok_kw_import = "import"
tok_kw_struct = "struct"
tok_kw_union = "union"
tok_kw_char = "char"
tok_kw_bool = "bool"
tok_kw_short = "short"
tok_kw_int = "int"
tok_kw_long = "long"
tok_kw_signed = "signed"
tok_kw_unsigned = "unsigned"
tok_kw_void = "void"
tok_kw_include = "include"
tok_kw_array = "array"
tok_kw_null = "null"
tok_kw_this = "this"
tok_kw_in = "in"
tok_kw_out = "out"
tok_kw_alloc = "alloc"
tok_kw_alloc_once = "alloc_once"
tok_kw_alloc_stack = "alloc_stack"
tok_kw_dealloc = "dealloc"
tok_kw_bind = "bind"
tok_kw_caller = "caller"
tok_kw_callee = "callee"
tok_kw_shared = "shared"
tok_kw_ioremap = "ioremap"
tok_kw_unused = "unused"
tok_kw_user = "user"
tok_kw_bind_memberof = "bind_memberof"
tok_kw_casted = "casted"

tok_space = lex_blank+
tok_arrow = "->"
tok_langle = "<"
tok_rangle = ">"
tok_lbrace = "{"
tok_rbrace = "}"
tok_lbrack = "["
tok_rbrack = "]"
tok_lpar = "("
tok_rpar = ")"
tok_star = "*"
tok_semi = ";"
tok_comma = ","
tok_dlbrace = "{{"
tok_drbrace = "}}"
tok_colon = ":"

tok_path = "<" chars:lex_path_char+ ">" {{
	std::string path {};
	for (const auto& c : chars.getValues())
		path += to_int<char>(c);

	value = idents.intern(path);
}}

tok_string = <ascii 34> chars:lex_string_char* <ascii 34> {{
	std::string path {};
	for (const auto& c : chars.getValues())
		path += to_int<char>(c);

	value = idents.intern(path);
}}

tok_number = digits:[0123456789]+ {{
	std::uint64_t n {};
	for (const auto& d : digits.getValues()) {
		n *= 10;
		n += to_int<char>(d) - '0';
	}

	value = reinterpret_cast<void*>(n);
}}

tok_ident = lex_ident_start rest:lex_ident_rest* {{
	std::string ident {};
	ident += to_int<char>($1);
	for (const auto& c : rest.getValues())
		ident += to_int<char>(c);

	value = idents.intern(ident);
}}

tok_ident_dot = lex_ident_start rest:lex_ident_rest_dot* {{
	std::string ident {};
	ident += to_int<char>($1);
	for (const auto& c : rest.getValues())
		ident += to_int<char>(c);

	value = idents.intern(ident);
}}

# TODO: clean this up
lex_path_char = [ !\"#$%&\'()*+,-./0123456789:;<=?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\^_`abcdefghijklmnopqrstuvwxyz{|}~] | <ascii 93>
lex_string_char = [ !#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\^_`abcdefghijklmnopqrstuvwxyz{|}~] | <ascii 93>
lex_block_comment_char = [ !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\^_`abcdefghijklmnopqrstuvwxyz{|}~] | lex_whitespace | <ascii 93>
lex_line_comment_char = [ !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\^_`abcdefghijklmnopqrstuvwxyz{|}~] | [ \t] | <ascii 93>
lex_whitespace = [ \t\n\r]

lex_newline = "\n" | "\r" "\n"
lex_line_comment = "//" lex_line_comment_char* lex_newline
lex_block_comment = "/*" lex_block_comment_tail
lex_block_comment_tail = "*/" | lex_block_comment_char lex_block_comment_tail
lex_comment = lex_line_comment | lex_block_comment
lex_blank = lex_whitespace+ | lex_comment

lex_ident_start = [_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ]
lex_ident_rest = [01234567890] | lex_ident_start
lex_ident_rest_dot = [01234567890] | lex_ident_start | [.]

lex_varbatim_expr_char = [ !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\^_`abcdefghijklmnopqrstuvwxyz|~] | lex_whitespace | <ascii 93>

tok_verbatim_expr = tok_dlbrace chs:lex_varbatim_expr_char* tok_drbrace {{
	std::string expr {};
	for (const auto& c : chs.getValues())
		expr += to_int<char>(c);

	value = idents.intern(expr);
}}

# PARSER

file = dfile:driver_file {{
	value = share(file {get_shared<driver_file>(dfile)});
}} | mfile:module_file {{
	value = share(file {get_shared<ref_vec<module_def>>(mfile)});
}}

driver_file = former:(tok_space? include_list)? tok_space? driver:driver_def latter:(tok_space? include_list)? tok_space? <eof> {{
	const auto former_ptr = get_shared<ident_vec>(former);
	const gsl::not_null driver_ptr {get_shared<driver_def>(driver)};
	const auto latter_ptr = get_shared<ident_vec>(latter);
	value = share(driver_file {former_ptr, driver_ptr, latter_ptr});
}}

include_list = first:include_stmt next:(tok_space? include_stmt)* {{
	const auto& next_vals = next.getValues();
	ident_vec paths {};
	paths.reserve(1 + next_vals.size());
	paths.emplace_back(to_ptr<ident>(first));
	for (const auto& p : next_vals)
		paths.emplace_back(to_ptr<ident>(p));

	value = share(std::move(paths));
}}

include_stmt = tok_kw_include tok_space? path:tok_path tok_space? tok_semi {{
	value = path;
}}

driver_def = tok_kw_driver tok_space name:tok_ident tok_space? tok_lbrace imports:(tok_space? import_list)? tok_space? tok_rbrace {{
	const auto name_val = to_ptr<ident>(name);
	const auto imports_ptr = get_shared<ident_vec>(imports);
	value = share(driver_def {name_val, imports_ptr});
}}

import_list = first:import_stmt next:(tok_space? import_stmt)* {{
	const auto& next_vals = next.getValues();
	ident_vec idents {};
	idents.reserve(1 + next_vals.size());
	idents.emplace_back(to_ptr<ident>(first));
	for (const auto& id : next_vals)
		idents.emplace_back(to_ptr<ident>(id));

	value = share(std::move(idents));
}}

import_stmt = tok_kw_import tok_space ident:tok_ident tok_space? tok_semi {{ value = ident; }}

module_file = tok_space? list:module_list tok_space? <eof> {{
	value = list;
}}

module_list = first:module_def rest:(tok_space? module_def)* {{
	ref_vec<module_def> list {};
	const auto& rvals = rest.getValues();
	list.reserve(rvals.size() + 1);
	list.emplace_back(get_shared<module_def>(first));
	for (const auto& item : rvals)
		list.emplace_back(get_shared<module_def>(item));

	value = share(std::move(list));
}}

module_def = tok_kw_module tok_space name:tok_ident tok_space? tok_lbrace items:(tok_space? module_item_list)? tok_space? tok_rbrace {{
	value = share(module_def {
		to_ptr<ident>(name),
		get_shared<ref_vec<module_item>>(items)
	});
}}

module_item_list = first:module_item rest:(tok_space? module_item)* {{
	ref_vec<module_item> list {};
	const auto& rvals = rest.getValues();
	list.reserve(rvals.size() + 1);
	list.emplace_back(get_shared<module_item>(first));
	for (const auto& item : rvals)
		list.emplace_back(get_shared<module_item>(item));

	value = share(std::move(list));
}}

module_item = header_stmt {{
	value = share(module_item {header_stmt {} }); // TODO: header_stmt
}} | ud:union_proj_def {{
	value = share(module_item {get_shared<proj_def>(ud)});
}} | sd:struct_proj_def {{
	value = share(module_item {get_shared<proj_def>(sd)});
}} | rpc:rpc_def {{
	value = share(module_item {get_shared<rpc_def>(rpc)});
}} | rpc_ptr:rpc_ptr_def {{
	value = share(module_item {get_shared<rpc_def>(rpc_ptr)});
}} | rpc_export:rpc_export_def {{
	value = share(module_item {get_shared<rpc_def>(rpc_export)});
}}

header_stmt = tok_kw_header tok_space? tok_path tok_space? tok_semi
	| tok_kw_header tok_space? tok_string tok_space? tok_semi

struct_proj_def = tok_kw_projection tok_space? tok_langle tok_space? tok_kw_struct tok_space? type:tok_ident tok_space? tok_rangle tok_space? name:tok_ident tok_space? tok_lbrace items:(tok_space? proj_field_list)? tok_space? tok_rbrace {{
	value = share(proj_def {
		to_ptr<ident>(name),
		to_ptr<ident>(type),
		get_shared<ref_vec<proj_field>>(items),
		proj_def_kind::struct_kind
	});
}}

union_proj_def = tok_kw_projection tok_space? tok_langle tok_space? tok_kw_union tok_space? type:tok_ident tok_space? tok_rangle tok_space? name:tok_ident tok_space? tok_lbrace items:(tok_space? proj_field_list)? tok_space? tok_rbrace {{
	value = share(proj_def {
		to_ptr<ident>(name),
		to_ptr<ident>(type),
		get_shared<ref_vec<proj_field>>(items),
		proj_def_kind::union_kind
	});
}}

# field_ref = aref:field_abs_ref {{
# 	value = share(field_ref {get_shared<field_abs_ref>(aref)});
# }} | rref:field_rel_ref {{
# 	value = share(field_ref {get_shared<field_rel_ref>(rref)});
# }}
# 
# field_rel_ref = head:tok_ident rest:(tok_arrow tok_ident)* {{
# 	const auto rest_vals = rest.getValues();
# 	field_rel_ref ref {};
# 	ref.links.reserve(1 + rest_vals.size());
# 	ref.links.push_back(to_ptr<ident>(head));
# 	for (const auto& val : rest_vals)
# 		ref.links.push_back(to_ptr<ident>(val));
# 
# 	value = share(std::move(ref));
# }}
# 
# field_abs_ref = tok_kw_this tok_arrow link:field_rel_ref {{
# 	value = share(field_abs_ref {get_shared<field_rel_ref>(link)});
# }}

proj_field_list = first:proj_field rest:(tok_space? proj_field)* {{
	ref_vec<proj_field> list {};
	const auto& rest_vals = rest.getValues();
	list.reserve(1 + rest_vals.size());
	list.emplace_back(get_shared<proj_field>(first));
	for (const auto& item : rest_vals) {
		list.emplace_back(get_shared<proj_field>(item));
	}

	value = share(std::move(list));
}}

var_field = decl:var_decl tok_space? tok_semi {{ value = decl; }}

proj_field = vf:var_field {{
	value = share(proj_field {get_shared<var_decl>(vf), 0});
}}
# | npd:naked_proj_decl {{
# 	value = share(proj_field {get_shared<naked_proj_decl>(npd), 0});
# }}
| decl:var_decl tok_space? tok_colon tok_space? width:tok_number tok_space? tok_semi {{
	value = share(proj_field {get_shared<var_decl>(decl), to_int<std::uint8_t>(width)});
}}

var_decl = ty:type_spec tok_space? name:tok_ident {{
	value = share(var_decl {get_shared<type_spec>(ty), to_ptr<ident>(name)});
}}

naked_proj_decl = tok_kw_projection tok_space? tok_langle tok_space? tok_kw_struct tok_space? tok_rangle tok_space? tok_lbrace fields:(tok_space? proj_field_list)? tok_space? tok_rbrace tok_space? name:tok_ident tok_space? tok_semi {{
	value = share(naked_proj_decl {
		get_shared<ref_vec<proj_field>>(fields),
		to_ptr<ident>(name)
	});
}}

val_attr = tok_kw_unused {{ value = reinterpret_cast<void*>(annotation_kind::unused); }}
	| tok_kw_in {{ value = reinterpret_cast<void*>(annotation_kind::in); }}
	| tok_kw_out {{ value = reinterpret_cast<void*>(annotation_kind::out); }}

ptr_attr = tok_kw_in {{ value = share(annotation {annotation_kind::in}); }}
	| tok_kw_out {{ value = share(annotation {annotation_kind::out}); }}
	| tok_kw_unused {{ value = share(annotation {annotation_kind::unused}); }}
	| tok_kw_alloc_once tok_space? tok_lpar tok_space? tok_kw_caller tok_space? tok_rpar {{
		value = share(annotation {annotation_kind::alloc_once_caller});
	}}
	| tok_kw_alloc_once tok_space? tok_lpar tok_space? tok_kw_callee tok_space? tok_rpar {{
		value = share(annotation {annotation_kind::alloc_once_callee});
	}}
	| tok_kw_alloc_stack tok_space? tok_lpar tok_space? tok_kw_caller tok_space? tok_rpar {{
		value = share(annotation {annotation_kind::alloc_stack_caller, nullptr, nullptr});
	}}
	| tok_kw_alloc_stack tok_space? tok_lpar tok_space? tok_kw_callee tok_space? tok_rpar {{
		value = share(annotation {annotation_kind::alloc_stack_callee, nullptr, nullptr});
	}}
	| tok_kw_alloc tok_space? tok_lpar tok_space? tok_kw_caller tok_space? tok_rpar {{
		value = share(annotation {annotation_kind::alloc_caller});
	}}
	| tok_kw_alloc tok_space? tok_lpar tok_space? tok_kw_callee tok_space? tok_rpar {{
		value = share(annotation {annotation_kind::alloc_callee});
	}}
	| tok_kw_alloc tok_space? tok_langle tok_space? size_expr:tok_verbatim_expr tok_space? tok_rangle tok_space? tok_lpar tok_space? tok_kw_caller tok_space? tok_rpar {{
		value = share(annotation {annotation_kind::alloc_caller, nullptr, to_ptr<ident>(size_expr), nullptr});
	}}
	| tok_kw_alloc tok_space? tok_langle tok_space? size_expr:tok_verbatim_expr tok_space? tok_rangle tok_space? tok_lpar tok_space? tok_kw_callee tok_space? tok_rpar {{
		value = share(annotation {annotation_kind::alloc_callee, nullptr, to_ptr<ident>(size_expr), nullptr});
	}}
	| tok_kw_alloc tok_space? tok_langle tok_space? size_expr:tok_verbatim_expr tok_space? tok_comma tok_space? flags_expr:tok_verbatim_expr tok_rangle tok_space? tok_lpar tok_space? tok_kw_caller tok_space? tok_rpar {{
		value = share(annotation {annotation_kind::alloc_caller, nullptr, to_ptr<ident>(size_expr), to_ptr<ident>(flags_expr)});
	}}
	| tok_kw_alloc tok_space? tok_langle tok_space? size_expr:tok_verbatim_expr tok_space? tok_comma tok_space? flags_expr:tok_verbatim_expr tok_rangle tok_space? tok_lpar tok_space? tok_kw_callee tok_space? tok_rpar {{
		value = share(annotation {annotation_kind::alloc_callee, nullptr, to_ptr<ident>(size_expr), to_ptr<ident>(flags_expr)});
	}}
	| tok_kw_dealloc tok_space? tok_lpar tok_space? tok_kw_caller tok_space? tok_rpar {{
		value = share(annotation {annotation_kind::dealloc_caller});
	}}
	| tok_kw_dealloc tok_space? tok_lpar tok_space? tok_kw_callee tok_space? tok_rpar {{
		value = share(annotation {annotation_kind::dealloc_callee});
	}}
	| tok_kw_bind_memberof tok_space? tok_langle tok_space? tok_kw_struct tok_space type:tok_ident tok_space? tok_comma tok_space? field:tok_ident_dot tok_space? tok_rangle tok_space? tok_lpar tok_space? tok_kw_caller tok_space? tok_rpar {{
		value = share(annotation {
			annotation_kind::bind_memberof_caller,
			nullptr,
			nullptr,
			nullptr,
			{to_ptr<ident>(type), to_ptr<ident>(field)}
		});
	}}
	| tok_kw_bind_memberof tok_space? tok_langle tok_space? tok_kw_struct tok_space type:tok_ident tok_space? tok_comma tok_space? field:tok_ident_dot tok_space? tok_rangle tok_space? tok_lpar tok_space? tok_kw_callee tok_space? tok_rpar {{
		std::cout << "[DEBUG] " << to_ptr<ident>(type) << ", " << to_ptr<ident>(field) << "\n";
		const auto tmp = annotation {
			annotation_kind::bind_memberof_callee,
			nullptr,
			nullptr,
			nullptr,
			{to_ptr<ident>(type), to_ptr<ident>(field)}
		};

		std::cout << "[DEBUG] After: " << to_ptr<ident>(type) << ", " << to_ptr<ident>(field) << "\n";

		value = share(tmp);
	}}
	| tok_kw_bind tok_space? tok_lpar tok_space? tok_kw_caller tok_space? tok_rpar {{
		value = share(annotation {annotation_kind::bind_caller});
	}}
	| tok_kw_bind tok_space? tok_lpar tok_space? tok_kw_callee tok_space? tok_rpar {{
		value = share(annotation {annotation_kind::bind_callee});
	}}
	| tok_kw_ioremap tok_space? tok_lpar tok_space? tok_kw_caller tok_space? tok_rpar {{
		value = share(annotation {annotation_kind::ioremap_caller});
	}}
	| tok_kw_ioremap tok_space? tok_lpar tok_space? tok_kw_callee tok_space? tok_rpar {{
		value = share(annotation {annotation_kind::ioremap_callee});
	}}
	| tok_kw_shared tok_space? tok_langle tok_space? id:tok_ident tok_space? tok_rangle {{
		value = share(annotation {annotation_kind::shared, to_ptr<ident>(id)});
	}}
	| tok_kw_user tok_space? tok_langle tok_space? size_expr:tok_verbatim_expr tok_space? tok_rangle tok_space? {{
		value = share(annotation {annotation_kind::user_ptr, nullptr, to_ptr<ident>(size_expr), nullptr});
  }}

val_attrs = tok_lbrack tok_space? list:val_attr_list tok_space? tok_rbrack {{ value = list; }}

ptr_attrs = tok_lbrack tok_space? list:ptr_attr_list tok_space? tok_rbrack {{ value = list; }}

val_attr_list = first:val_attr rest:(tok_space? tok_comma tok_space? val_attr)* {{
	auto f = to_int<annotation_kind>(first);
	for (const auto r : rest.getValues()) {
		f |= to_int<annotation_kind>(r);
	}

	value = reinterpret_cast<void*>(f);
}}

ptr_attr_list = first:ptr_attr rest:(tok_space? tok_comma tok_space? ptr_attr)* {{
	auto f = get_shared<annotation>(first);
	for (const auto r : rest.getValues()) {
		const auto& tmp = get_shared<annotation>(r);
		f->kind |= tmp->kind;
		assert(!f->share_global);
		assert(!f->member.struct_type && !f->member.field);
		f->share_global = tmp->share_global;
		// Overwrite the size! If the annotation has multiple sizes, we take the last one.
		if (tmp->size_verbatim)
			f->size_verbatim = tmp->size_verbatim;
		f->member = tmp->member;
	}

	value = first;
}}

# NOTE: we don't need type spacing rules for parsing since that parse will just fail in contexts where it's needed
# We'd only need if we were generating it, and even then we'd just pessimistically insert spaces anyways

type_primitive = tok_kw_unsigned tok_space tok_kw_long tok_space tok_kw_long {{
	value = reinterpret_cast<void*>(type_primitive::ty_ullong);
}} | tok_kw_long tok_space tok_kw_long tok_space tok_kw_unsigned tok_space tok_kw_int {{
	value = reinterpret_cast<void*>(type_primitive::ty_ullong);
}} | tok_kw_long tok_space tok_kw_long {{
	value = reinterpret_cast<void*>(type_primitive::ty_llong);
}} | tok_kw_unsigned tok_space tok_kw_long {{
	value = reinterpret_cast<void*>(type_primitive::ty_ulong);
}} | tok_kw_long tok_space tok_kw_unsigned tok_space tok_kw_int {{
	value = reinterpret_cast<void*>(type_primitive::ty_ulong);
}} | tok_kw_unsigned tok_space tok_kw_int {{
	value = reinterpret_cast<void*>(type_primitive::ty_uint);
}} | tok_kw_unsigned tok_space tok_kw_short {{
	value = reinterpret_cast<void*>(type_primitive::ty_ushort);
}} | tok_kw_unsigned tok_space tok_kw_char {{
	value = reinterpret_cast<void*>(type_primitive::ty_uchar);
}} | tok_kw_signed tok_space tok_kw_char {{
	value = reinterpret_cast<void*>(type_primitive::ty_schar);
}} | tok_kw_short {{
	value = reinterpret_cast<void*>(type_primitive::ty_short);
}} | tok_kw_long {{
	value = reinterpret_cast<void*>(type_primitive::ty_long);
}} | tok_kw_int {{
	value = reinterpret_cast<void*>(type_primitive::ty_int);
}} | tok_kw_char {{
	value = reinterpret_cast<void*>(type_primitive::ty_char);
}} | tok_kw_bool {{
	value = reinterpret_cast<void*>(type_primitive::ty_bool);
}} | "s64" {{
	value = reinterpret_cast<void*>(type_primitive::ty_llong);
}} | "s32" {{
	value = reinterpret_cast<void*>(type_primitive::ty_int);
}} | "s16" {{
	value = reinterpret_cast<void*>(type_primitive::ty_short);
}} | "s8" {{
	value = reinterpret_cast<void*>(type_primitive::ty_schar);
}} | "u64" {{
	value = reinterpret_cast<void*>(type_primitive::ty_ullong);
}} | "u32" {{
	value = reinterpret_cast<void*>(type_primitive::ty_uint);
}} | "u16" {{
	value = reinterpret_cast<void*>(type_primitive::ty_ushort);
}} | "u8" {{
	value = reinterpret_cast<void*>(type_primitive::ty_uchar);
}}

# Do note that there is very little difference between const array<int, 10> and array<const int, 10>.
type_array = tok_kw_array tok_space? tok_langle tok_space? type:type_spec tok_space? tok_comma tok_space? size:array_size tok_space? tok_rangle {{
	value = share(type_array {get_shared<type_spec>(type), get_shared<array_size>(size)});
}}

array_size = n:tok_number {{
	value = share(array_size {to_int<unsigned>(n)});
}} | tok_kw_null {{
	value = share(array_size {tok_kw_null {} });
}} | ref:tok_verbatim_expr {{
	value = share(array_size {to_ptr<ident>(ref)});
}}

# Literally just an alias for array<char, null>
type_string = tok_kw_string

type_rpc = tok_kw_rpc_ptr tok_space name:tok_ident {{
	value = share(type_rpc {to_ptr<ident>(name)});
}}

type_proj = tok_kw_projection tok_space name:tok_ident {{
	value = share(type_proj {to_ptr<ident>(name)});
}}

type_casted = tok_kw_casted tok_space? tok_langle tok_space? decl:type_spec tok_space? tok_comma tok_space? real:type_spec tok_space? tok_rangle {{
	value = share(type_casted {get_shared<type_spec>(decl), get_shared<type_spec>(real)});
}}

type_list = head:type_spec rest:(tok_space? tok_comma tok_space? type_spec)* {{
	const auto rvals = rest.getValues();
	ref_vec<type_spec> types {};
	types.reserve(rvals.size() + 1);
	types.push_back(get_shared<type_spec>(head));
	for (const auto& type : rvals)
		types.push_back(get_shared<type_spec>(type));

	value = share(std::move(types));
}}

# These are types free of const or pointers
type_stem = arr:type_array {{
	value = share(type_stem {get_shared<type_array>(arr)});
}} | str:type_string {{
	value = share(type_stem {type_string {} }); // yes, this is a tag
}} | rpc:type_rpc {{
	value = share(type_stem {get_shared<type_rpc>(rpc)});
}} | proj:type_proj {{
	value = share(type_stem {get_shared<type_proj>(proj)});
}} | arith:type_primitive {{
	value = share(type_stem {to_int<type_primitive>(arith)});
}} | cast:type_casted {{
	value = share(type_stem {get_shared<type_casted>(cast)});
}} | tok_kw_void {{
	value = share(type_stem {type_none {} });
}}

indirection_attrs = val:ptr_attrs tok_space? {{ value = val; }} | <void> {{ value = share(annotation {}); }}

indirection = attrs:indirection_attrs tok_star is_c:(tok_space? tok_kw_const)? {{
	value = share(indirection {get_shared<annotation>(attrs), gsl::narrow_cast<bool>(is_c.getValue())});
}}

type_spec = is_c:(tok_kw_const tok_space {{	value = $1; }})? stem:type_stem indirs:(tok_space? indirection)* val_annotation_kind:(tok_space? val_attrs)? {{
	auto& ivals = indirs.getValues();
	ref_vec<indirection> a {};
	a.reserve(ivals.size());
	for (const auto& indir : ivals)
		a.push_back(get_shared<indirection>(indir));

	value = share(type_spec {
		get_shared<type_stem>(stem),
		std::move(a),
		to_int<annotation_kind>(val_annotation_kind),
		gsl::narrow_cast<bool>(is_c.getValue())
	});
}}

rpc_def = tok_kw_rpc tok_space? ret_t:type_spec tok_space? name:tok_ident tok_space? tok_lpar args:(tok_space? argument_list)? tok_space? tok_rpar tok_space? tok_lbrace projs:(tok_space? rpc_item_list)? tok_space? tok_rbrace {{
	value = share(rpc_def {
		get_shared<type_spec>(ret_t),
		to_ptr<ident>(name),
		get_shared<ref_vec<var_decl>>(args),
		get_shared<ref_vec<rpc_item>>(projs),
		rpc_def_kind::direct
	});
}}

rpc_ptr_def = tok_kw_rpc_ptr tok_space? ret_t:type_spec tok_space? name:tok_ident tok_space? tok_lpar args:(tok_space? argument_list)? tok_space? tok_rpar tok_space? tok_lbrace projs:(tok_space? rpc_item_list)? tok_space? tok_rbrace {{
	value = share(rpc_def {
		get_shared<type_spec>(ret_t),
		to_ptr<ident>(name),
		get_shared<ref_vec<var_decl>>(args),
		get_shared<ref_vec<rpc_item>>(projs),
		rpc_def_kind::indirect
	});
}}

rpc_export_def = tok_kw_rpc_export tok_space? ret_t:type_spec tok_space? name:tok_ident tok_space? tok_lpar args:(tok_space? argument_list)? tok_space? tok_rpar tok_space? tok_lbrace projs:(tok_space? rpc_item_list)? tok_space? tok_rbrace {{
	value = share(rpc_def {
		get_shared<type_spec>(ret_t),
		to_ptr<ident>(name),
		get_shared<ref_vec<var_decl>>(args),
		get_shared<ref_vec<rpc_item>>(projs),
		rpc_def_kind::export_sym
	});
}}

rpc_item_list = first:rpc_item rest:(tok_space? rpc_item)* {{
	ref_vec<rpc_item> list {};
	const auto& rvals = rest.getValues();
	list.reserve(rvals.size() + 1);
	list.emplace_back(get_shared<rpc_item>(first));
	for (const auto& item : rvals)
		list.emplace_back(get_shared<rpc_item>(item));

	value = share(std::move(list));
}}

rpc_item = ud:union_proj_def {{
	value = share(rpc_item {get_shared<proj_def>(ud)});
}} | sd:struct_proj_def {{
	value = share(rpc_item {get_shared<proj_def>(sd)});
}} | rptr:rpc_ptr_def {{
	value = share(rpc_item {get_shared<rpc_def>(rptr)});
}}

argument_list = first:var_decl rest:(tok_space? tok_comma tok_space? var_decl)* {{
	ref_vec<var_decl> list {};
	const auto& rvals = rest.getValues();
	list.reserve(rvals.size() + 1);
	list.emplace_back(get_shared<var_decl>(first));
	for (const auto& item : rvals)
		list.emplace_back(get_shared<var_decl>(item));

	value = share(std::move(list));
}}
