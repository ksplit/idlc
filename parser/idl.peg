start-symbol: file

include: {{
	#include "ast.h"

	#include <sstream>
	#include <vector>
}}

code: {{
	using namespace idlc;

	// If you're confused, know this: this allows us to compare strings for equality by
	// comparing their pointer values (that's why you see the lack of strcmp() or equivalents)
	string_heap identifiers;
}}

# *must* pin down the semantics of everything Sarah's paper (some ambiguities)
# What is the meaning of a projection's annotations for a double_indirection pointer?
# i.e.: proj foo_proj** foo
# What goes on behind the scenes there?

rules:

line_comment = "//" line_comment_tail
line_comment_tail = line_comment_end | . line_comment_tail
line_comment_end = "\n"

block_comment = "/*" block_comment_tail
block_comment_tail = "*/" | . block_comment_tail

comment = line_comment | block_comment
space = [ \n\r\t] | comment
whitespace = space+
ident_start = [abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_]
ident_cont = ident_start | [0123456789]
identifier = sc:ident_start rcs:ident_cont* {{
	std::stringstream str;
	str << (char)(std::uintptr_t)sc.getValue();
	for (const auto& v : rcs.getValues()) {
		str << (char)(std::uintptr_t)v.getValue();
	}

	value = identifiers.intern(str.str().c_str());
}}

rpc_kw = "rpc"
int_kw = "int"
short_kw = "short"
long_kw = "long"
char_kw = "char"
bool_kw = "bool"
float_kw = "float"
double_kw = "double"
void_kw = "void"
unsigned_kw = "unsigned"
in_kw = "in"
out_kw = "out"
alloc_kw = "alloc"
dealloc_kw = "dealloc"
caller_kw = "caller"
callee_kw = "callee"
proj_kw = "projection"
struct_kw = "struct"
bind_kw = "bind"
module_kw = "module"

oparen = "("
cparen = ")"
obracket = "["
cbracket = "]"
obrace = "{"
cbrace = "}"
oangle = "<"
cangle = ">"
semi = ";"
comma = ","
star = "*"

# to simplify parsing, whitespace requirements are in the type rules
# note that tho the grammar allows annotations on all indirections
# current semantics give only the "topmost" ones meaning

# there's really only 3 basic type categories: primitive, void, and projection
# pointer_type points to any of these, and has annotations
# argument types are either pointer types, primitive, or projection
# return types are any of these (void, projection, primitive, pointer)

unsigned_type = unsigned_kw whitespace ty:signed_type {{ value = (void*)to_unsigned((primitive_type_kind)(std::uintptr_t)ty.getValue()); }}
signed_type = int_kw {{
	value = (void*)primitive_type_kind::int_k;
}} | short_kw {{
	value = (void*)primitive_type_kind::short_k;
}} | char_kw {{
	value = (void*)primitive_type_kind::char_k;
}} | long_kw whitespace long_kw {{
	value = (void*)primitive_type_kind::long_long_k;
}} | long_kw {{
	value = (void*)primitive_type_kind::long_k;
}}

fp_type = float_kw {{
	value = (void*)primitive_type_kind::float_k;
}} | double_kw {{
	value = (void*)primitive_type_kind::double_k;
}}

primitive_type = ty:signed_type {{ 
	value = new primitive_type((primitive_type_kind)(std::uintptr_t)ty.getValue());
}} | ty:unsigned_type {{
	value = new primitive_type((primitive_type_kind)(std::uintptr_t)ty.getValue());
}} | ty:fp_type {{
	value = new primitive_type((primitive_type_kind)(std::uintptr_t)ty.getValue());
}} | ty:bool_kw {{
	value = new primitive_type(primitive_type_kind::bool_k);
}}

projection_type = proj_kw whitespace id:identifier {{
	value = new projection_type((gsl::czstring<>)id.getValue());
}} # NOTE: empty projections are required for 2-level indirection (??)

copy_type = void_kw {{
	value = nullptr;
}} | prim:primitive_type {{
	value = new copy_type(std::unique_ptr<primitive_type>((primitive_type*)prim.getValue()));
}} | proj:projection_type {{
	value = new copy_type(std::unique_ptr<projection_type>((projection_type*)proj.getValue()));
}}

type = ct:copy_type space_or_attribs stars:(star space*)+ {{
	value = new type(std::unique_ptr<copy_type>((copy_type*)ct.getValue()), nullptr, stars.getValues().size());
}} | ct:copy_type space_or_attribs {{
	value = new type(std::unique_ptr<copy_type>((copy_type*)ct.getValue()), nullptr, 0);
}}

wtype = ct:copy_type space_or_attribs stars:(star space*)+ {{
	value = new type(std::unique_ptr<copy_type>((copy_type*)ct.getValue()), nullptr, stars.getValues().size());
}} | ct:copy_type wspace_or_attribs {{
	value = new type(std::unique_ptr<copy_type>((copy_type*)ct.getValue()), nullptr, 0);
}}

container_side = caller_kw | callee_kw
alloc_attrib = alloc_kw (space* oparen space* container_side space* cparen)?
dealloc_attrib = dealloc_kw (space* oparen space* container_side space* cparen)?
bind_attrib = bind_kw (space* oparen space* container_side space* cparen)?
attribute = in_kw | out_kw | alloc_attrib | dealloc_attrib | bind_attrib
attrib_list = attribute space* attrib_list_tail
attrib_list_tail = comma space* attrib_list | <void>
attributes = obracket space* attrib_list space* cbracket
wspace_or_attribs =  space* attributes space* | whitespace
space_or_attribs = space* attributes space* | space*

rpc_pseudo_field = rpc_kw wspace_or_attribs ret_field:pseudo_field oparen space* star space* cparen space* oparen space* args:arg_list space* cparen space* {{
	auto& vec = *(std::vector<std::unique_ptr<field>>*)args.getValue();
	std::reverse(begin(vec), end(vec));
	auto sig = std::make_unique<signature>(
		std::unique_ptr<field>((field*)ret_field.getValue()),
		move(vec));
	delete &vec;
	value = new rpc_field(nullptr, move(sig));
}}

var_pseudo_field = ty:type {{
	value = new var_field(nullptr, std::unique_ptr<type>((type*)ty.getValue()));
}}

# these are the return fields
pseudo_field = rf:rpc_pseudo_field {{
	value = new field(std::unique_ptr<rpc_field>((rpc_field*)rf.getValue()));
}} | vf:var_pseudo_field {{
	value = new field(std::unique_ptr<var_field>((var_field*)vf.getValue()));
}}

wspace_var_pseudo_field = ty:wtype {{
	value = new var_field(nullptr, std::unique_ptr<type>((type*)ty.getValue()));
}}

# these are the return fields
wspace_pseudo_field = rf:rpc_pseudo_field {{
	value = new field(std::unique_ptr<rpc_field>((rpc_field*)rf.getValue()));
}} | vf:wspace_var_pseudo_field {{
	value = new field(std::unique_ptr<var_field>((var_field*)vf.getValue()));
}}

rpc_ptr_ident = oparen space* star space* id:identifier space* cparen {{ value = id.getValue(); }}
rpc_ptr = rpc_kw wspace_or_attribs ret_field:pseudo_field id:rpc_ptr_ident space* oparen space* args:arg_list space* cparen {{
	auto& vec = *(std::vector<std::unique_ptr<field>>*)args.getValue();
	std::reverse(begin(vec), end(vec));
	auto sig = std::make_unique<signature>(
		std::unique_ptr<field>((field*)ret_field.getValue()),
		move(vec));
	delete &vec;
	value = new rpc_field((gsl::czstring<>)id.getValue(), move(sig));
}}

rpc_decl = rpc_kw whitespace ret_field:wspace_pseudo_field id:identifier space* oparen space* args:arg_list space* cparen space* semi {{
	auto& vec = *(std::vector<std::unique_ptr<field>>*)args.getValue();
	std::reverse(begin(vec), end(vec));
	auto sig = std::make_unique<signature>(
		std::unique_ptr<field>((field*)ret_field.getValue()),
		move(vec));
	delete &vec;
	value = new rpc((gsl::czstring<>)id.getValue(), move(sig));
}}

arg_list = arg:argument space* v:arg_list_tail {{
	auto& vec = *(std::vector<std::unique_ptr<field>>*)v.getValue();
	vec.emplace_back(std::unique_ptr<field>((field*)arg.getValue()));
	value = &vec;
}}

arg_list_tail = comma space* v:arg_list {{
	value = v.getValue();
}} | <void> {{
	value = new std::vector<std::unique_ptr<field>>();
}}

argument = rf:rpc_ptr {{
	value = new field(std::unique_ptr<rpc_field>((rpc_field*)rf.getValue()));
}} | ty:wtype id:identifier {{
	value = new field(std::make_unique<var_field>((gsl::czstring<>)id.getValue(), std::unique_ptr<type>((type*)ty.getValue())));
}}

projection_rpc_field = ptr:rpc_ptr space* semi {{
	value = ptr.getValue();
}}

projection_var_field = ty:wtype id:identifier space* semi {{
	value = new var_field((gsl::czstring<>)id.getValue(), std::unique_ptr<type>((type*)ty.getValue()));
}}

proj_field = rf:projection_rpc_field {{
	value = new field(std::unique_ptr<rpc_field>((rpc_field*)rf.getValue()));
}} | vf:projection_var_field {{
	value = new field(std::unique_ptr<var_field>((var_field*)vf.getValue()));
}}

projection = proj_kw space* oangle space* struct_kw whitespace under:identifier space* cangle space* id:identifier space* obrace space* pfs:(pf:proj_field space* {{
	value = pf.getValue();
}})* cbrace {{
	std::vector<std::unique_ptr<field>> ptrs;
	for (const auto& v : pfs.getValues()) {
		ptrs.push_back(std::unique_ptr<field> {(field*)v.getValue()});
	}

	value = new projection((gsl::czstring<>)id.getValue(), (gsl::czstring<>)under.getValue(), move(ptrs));
}}

item = v:rpc_decl {{
	value = new item(std::unique_ptr<rpc>((rpc*)v.getValue()));
}} | v:projection {{
	value = new item(std::unique_ptr<projection>((projection*)v.getValue()));
}}

module = module_kw whitespace id:identifier space* obrace space* items:(i:item space* {{ value = i.getValue(); }})* cbrace {{
	std::vector<std::unique_ptr<item>> ptrs;
	for (const auto& v : items.getValues()) {
		ptrs.push_back(std::unique_ptr<item> {(item*)v.getValue()});
	}

	value = new module {(gsl::czstring<>)id.getValue(), std::move(ptrs)};
}}

file = space* mods:(m:module space* {{ value = m.getValue(); }})* <eof> {{
	std::vector<std::unique_ptr<module>> ptrs;
	for (const auto& v : mods.getValues()) {
		ptrs.push_back(std::unique_ptr<module> {(module*)v.getValue()});
	}

	value = new file {std::move(ptrs)};
}}