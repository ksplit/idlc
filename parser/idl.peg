start-symbol: file

# *must* pin down the semantics of everything Sarah's paper (some ambiguities)
# What is the meaning of a projection's annotations for a double-indirection pointer?
# i.e.: proj foo_proj** foo
# What goes on behind the scenes there?

rules:

space = [ \n\t]
whitespace = space+
ident_start = [abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_]
ident_cont = ident_start | [0123456789]
identifier = ident_start ident_cont*

rpc_kw = "rpc"
int_kw = "int"
short_kw = "short"
long_kw = "long"
char_kw = "char"
bool_kw = "bool"
float_kw = "float"
double_kw = "double"
void_kw = "void"
unsigned_kw = "unsigned"
in_kw = "in"
out_kw = "out"
alloc_kw = "alloc"
dealloc_kw = "dealloc"
caller_kw = "caller"
callee_kw = "callee"
proj_kw = "proj"
struct_kw = "struct"
bind_kw = "bind"

oparen = "("
cparen = ")"
obracket = "["
cbracket = "]"
obrace = "{"
cbrace = "}"
oangle = "<"
cangle = ">"
semi = ";"
comma = ","
star = "*"

signed_type = int_kw | short_kw | char_kw | long_kw whitespace long_kw | long_kw
unsigned_type = unsigned_kw whitespace signed_type
fp_type = float_kw | double_kw
primitive_type = signed_type | unsigned_type | fp_type | bool_kw
simple_type = pointer_type | primitive_type | proj_type
ret_type = simple_type | void_kw
addressable_type = primitive_type | proj_type | void_kw
pointer_type = addressable_type star+
proj_type = proj_kw whitespace identifier

container_side = caller_kw | callee_kw
alloc_attrib = alloc_kw (space* oparen space* container_side space* cparen)?
dealloc_attrib = dealloc_kw (space* oparen space* container_side space* cparen)?
bind_attrib = bind_kw (space* oparen space* container_side space* cparen)?
attribute = in_kw | out_kw | alloc_attrib | dealloc_attrib | bind_attrib
attrib_list = attribute space* attrib_list_tail
attrib_list_tail = comma space* attrib_list | <void>
attributes = obracket space* attrib_list space* cbracket

rpc_decl = rpc_kw whitespace ret_type whitespace identifier space* oparen space* arg_list space* cparen space* semi
arg_list = argument space* arg_list_tail
arg_list_tail = comma space* arg_list | <void>
argument = simple_type whitespace attributes? space* identifier

proj_field = simple_type whitespace attributes? space* identifier space* semi
proj_header = proj_kw space* oangle space* struct_kw whitespace identifier space* cangle space* identifier
proj_body = obrace space* (proj_field space*)* cbrace
projection = proj_header space* proj_body

item = rpc_decl | projection
file = (item space*)+ <eof>