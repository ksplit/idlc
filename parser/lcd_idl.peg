start-symbol: File


include: {{
#include "lcd_ast.h"
#include "error.h"
#include <vector>
#include <stdlib.h>
#include <string>
#include <stdint.h>
}}

code: {{

typedef enum {
    IN = 0x1,
    OUT = 0x2,
    ALLOC_CALLER = 0x4,
    ALLOC_CALLEE = 0x8,
    DEALLOC_CALLER = 0x10,
    DEALLOC_CALLEE = 0x20,
    BIND_CALLER = 0x40,
    BIND_CALLEE = 0x80,
} spec_t;

LexicalScope *current_scope;
LexicalScope *current_module_scope;

void set_specs(Variable &v, const Value s)
{
    // return if NULL
    if (!s.getValue())
        return;

    int spec = *((int*) s.getValue());

    if (spec & IN) {
        v.set_in(true);
    }
    if (spec & OUT) {
        v.set_out(true);
    }
    if (spec & ALLOC_CALLER) {
        v.set_alloc_caller(true);
    }
    if (spec & ALLOC_CALLEE) {
        v.set_alloc_callee(true);
    }
    if (spec & DEALLOC_CALLER) {
        v.set_dealloc_caller(true);
    }
    if (spec & DEALLOC_CALLEE) {
        v.set_dealloc_callee(true);
    }
    if (spec & BIND_CALLER) {
        v.set_bind_caller(true);
    }
    if (spec & BIND_CALLEE) {
        v.set_bind_callee(true);
    }
}

const char* container_name(const char* name)
{
    int length = strlen(name);
    int length2 = strlen("_container");
    char *new_str = (char*) malloc(sizeof(char)*(length+length2+1));

    std::ostringstream total;
    total << name << "_container";
    strncpy(new_str, total.str().c_str(), length+length2+1);
    return new_str;
}

void set_current_scope(LexicalScope *ls)
{
    current_scope = ls;
}

LexicalScope* get_current_scope()
{
    return current_scope;
}

void set_current_module_scope(LexicalScope *ls)
{
    current_module_scope = ls;
}

LexicalScope* get_current_module_scope()
{
    return current_module_scope;
}

Type * getType(const char* type)
{
    int err;
    LexicalScope *ls = get_current_scope();
    if(!ls) {
        printf("current scope is null\n");
    }
    Type* val = ls->lookup(type, &err);

    if(!val)
    {
        printf("val is null\n");
        val = new UnresolvedType(type);
    }
    return val;
}

Variable* getVariable(const char* id)
{
    int err;
    LexicalScope *ls = get_current_scope();
    if(!ls) {
        printf("current scope is null!\n");
    }
    Variable *v = ls->lookup_variable(id, &err);

    if(!v) {
        printf("could not find variable %s\n", id);
        return 0x0;
    }
    return v;
}

int count_pointers(Value v)
{
    int count = 0;
    for(Value::iterator it = v.getValues().begin(); it != v.getValues().end(); it++) {
        const Value & v2 = *it;
        char star = (char) (intptr_t) v2.getValue();
        printf("supposed to be a star is %c\n", star);
        if(star == '*') {
           count += 1;
        } else {
           printf("Not a star\n");
        }
    }
    return count;
}

void insertVariable(Variable *v)
{
    LexicalScope *ls = get_current_scope();
    bool ret = ls->insert(v);
    if(! ret)
    {
        ErrorReport* er = ErrorReport::instance();
        er->set_error();
        printf("Error: variable by name %s already exists in current scope.\n", v->identifier());
    }
}

void insertType(const char * sym, Type * val) // should this be void?
{
    LexicalScope *ls = get_current_scope();
    bool ret = ls->insert(sym, val);
    if(!ret)
    {
        ErrorReport* er = ErrorReport::instance();
        er->set_error();
        printf("Error: type by name %s already exists in current scope.\n", val->name());
    }
}

const char* returnVarName()
{
    char* name = "ret";
    while(get_current_scope()->contains_identifier(name)) {
        // append _ on end of name

        int len1 = strlen(name);
        int len2 = strlen("_");
        char* new_name = (char*) malloc(sizeof(char)*(len1+len2+1));

        std::ostringstream total;
        total << name << "_";
        strncpy(new_name, total.str().c_str(), len1+len2+1);
        name = new_name;
    }
    return name;
}
}}

rules:


File		=	Spacing i:Include* GlobalScopeDefinitions t:Interface* <eof> {{
			    std::vector<Module*> modules;
			    std::vector<Include*> includes;
			
			    for(Value::iterator it = i.getValues().begin(); it != i.getValues().end(); it ++) {
			        const Value & v = *it;
			        includes.push_back((Include*) v.getValue());
			    }		       
			
			    for(Value::iterator it = t.getValues().begin(); it != t.getValues().end(); it ++) {
			        const Value & v2 = *it;
			        modules.push_back((Module*) v2.getValue());
			    }

			    value = new Project(GlobalScope::instance(), modules, includes); 
			}}

GlobalScopeDefinitions =      d:Type_Definitions* {{
		       	          for(Value::iterator it = d.getValues().begin(); it != d.getValues().end(); it ++) { 
			    	      const Value & v2 = *it;
			    	      Type *type = (Type*) v2.getValue();
			    	      bool err = GlobalScope::instance()->insert(type->name(), type);
				      if(!err) {
				          printf("Error: definition already exists for a type of name %s in global scope.\n", type->name());
				      }
				  } 
			      }}

Pathname	= 	p1:PathStart+ {{
			    std::ostringstream total;
			    
			    for(Value::iterator it = p1.getValues().begin(); it != p1.getValues().end(); it ++) {
			        const Value &v = *it;
				char c = (char) (intptr_t) v.getValue();
				total << c;
			    }
			    
			    std::string str = total.str();
			    
			    value.value = malloc(str.length()+1);
			    strncpy((char*)value.value, str.c_str(), str.length()+1);
			}}

PathStart      	=	IdentCont | [./~]

Identifier	=	i1:IdentStart i2:IdentCont* {{ 
			    std::ostringstream total;
			    total << (char) (intptr_t) i1.getValue();

		   	    for(Value::iterator it = i2.getValues().begin(); it != i2.getValues().end(); it ++)
		   	    {   
			        const Value & v = *it;
				char letter = (char) (intptr_t) v.getValue();
				total << letter;
		   	    }
			    std::string str = total.str();
		   	    value.value = malloc(str.length()+1);
			    strncpy((char*)value.value, str.c_str(), str.length()+1); 
			}}

IdentStart	=	[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_]

IdentCont	=	IdentStart | [0123456789]

unnamed_scope 	= 	s:unnamed_scope_special d:Type_Definitions* r:Rpc* Spacing CLOSEC Spacing {{
		            
			    std::vector<Rpc*> *rpcs = new std::vector<Rpc*>();
			    for(Value::iterator it = r.getValues().begin(); it != r.getValues().end(); it ++) {
			        const Value &v = *it;
				Rpc *r = (Rpc*) v.getValue();
				rpcs->push_back(r);
			    }
		
			    set_current_scope(get_current_scope()->outer_scope()); // leaving current scope
			    value = rpcs;
			}}
			
unnamed_scope_special = Spacing OPENC Spacing {{
		      	    LexicalScope *tmp = get_current_module_scope();
		      	    LexicalScope *new_scope = new LexicalScope(tmp);
			    tmp->add_inner_scope(new_scope);
			    set_current_scope(new_scope);
			    value = new_scope;
			}}

pc_unnamed_scope_special = Spacing OPENC Spacing {{
			    LexicalScope *tmp = get_current_scope();
		      	    LexicalScope *new_scope = new LexicalScope(tmp);
			    tmp->add_inner_scope(new_scope);
			    set_current_scope(new_scope);
			    value = new_scope;
			 }}


pc_unnamed_scope=	s:pc_unnamed_scope_special d:Type_Definitions* p:ProjField* Spacing CLOSEC Spacing {{	
			    printf("matched a pc unnamed scope\n");
			    std::vector<ProjectionField*> *fields = new std::vector<ProjectionField*>();
			    for(Value::iterator it = p.getValues().begin(); it != p.getValues().end(); it ++) {
			        const Value & v = *it;
				std::vector<ProjectionField*> *pf = (std::vector<ProjectionField*>*) v.getValue();
				fields->insert(fields->end(), pf->begin(), pf->end());
			    }
			    set_current_scope(get_current_scope()->outer_scope()); // leaving current scope
			    value = fields;
			}}

Interface	=	  m:Interface_special Space+ id:Identifier Spacing OPEN chans:Channels Spacing CLOSE Spacing OPENC Spacing d:Type_Definitions* r:Rpc* r2:unnamed_scope* Spacing CLOSEC Spacing {{ 
			      LexicalScope *module_scope = (LexicalScope*) m.getValue();
			      std::vector<Rpc*> rpcs;				
			      std::vector<GlobalVariable*> *channels = (std::vector<GlobalVariable*>*) chans.getValue();  
			      std::vector<GlobalVariable*> channels2 = *channels;

			      for(Value::iterator it = r.getValues().begin(); it != r.getValues().end(); it ++) {
			          const Value & v2 = *it;
				  Rpc *r2 = (Rpc*) v2.getValue();
				  rpcs.push_back(r2);
			      }

			      for(Value::iterator it = r2.getValues().begin(); it != r2.getValues().end(); it ++) {
			          const Value & v2 = *it;
				  std::vector<Rpc*> *r_tmp = (std::vector<Rpc*>*) v2.getValue();
				  rpcs.insert(rpcs.end(), r_tmp->begin(), r_tmp->end());
			      }

			      set_current_scope(get_current_scope()->outer_scope()); // leaving current scope	  
			      value = new Module((char*) id.getValue(), rpcs, channels2, module_scope); 
			  }}

Interface_special =	  "module" {{
		  	      LexicalScope *new_scope = new LexicalScope(GlobalScope::instance());
			      GlobalScope::instance()->add_inner_scope(new_scope);
			      set_current_module_scope(new_scope);
			      set_current_scope(new_scope);
			      value = new_scope;  
			  }}

Typedef		=	 "typedef" Spacing "<" Spacing rt:RealType "," Spacing mt:Type_form ">" Spacing id:Identifier Spacing {{ 
			     Typedef * val = new Typedef((char*) id.getValue(), (char*) rt.getValue(), (Type*) mt.getValue());
			     insertType((char*)id.getValue(),val);
			 }}

Verbatim	=	 "verbatim" Spacing "[" contents:VerbatimContent "]" {{ std::ostringstream total;
			for(Value::iterator it = contents.getValues().begin(); it != contents.getValues().end(); it ++)
			{
			const Value &v = *it;
			char letter = (char) (intptr_t) v.getValue();
			total << letter;     
			}
			std::string str = total.str();
			value = &str[0]; }}

VerbatimContent =	!"]" .

RealType	=	fp:Identifier? Spacing sp:Identifier Spacing {{ //temporary solution
			std::ostringstream total;	     
			total << fp.getValue() << ' ' << sp.getValue();
			std::string str = total.str();
			value.value = malloc(str.length()+1);
			strncpy((char*)value.value, str.c_str(), str.length()+1);
			}}		

String		=	<ascii 34> l:any_letter+ <ascii 34> {{
			    std::ostringstream total;
			    for(Value::iterator it = l.getValues().begin(); it != l.getValues().end(); it ++)
			    {
			        const Value & v = *it;
				char letter = (char) (intptr_t) v.getValue();
				
				if(letter == '\\')
				{
					if((it++) == l.getValues().end())
					{
						total << letter;
						break;
					}	
					
					letter = (char) (intptr_t) (*it).getValue();
					switch (letter)
					{
					case 'n':
					     total <<'\n';
					     break;
					case 't':
					     total << '\t';
					     break;
					default:
						total << letter;
					}
					continue;
				}
				total << letter;
			    }
			    std::string str = total.str();
			    value.value = malloc(str.length()+1);
			    strncpy((char*)value.value, str.c_str(), str.length()+1);
			}}

any_letter	=	[_.,/?<>'; =:%`!@#$^&*()-+{}|\\ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789]

Type_Definitions =	Typedef | Projection {{ printf("done with projection\n"); }}
		 	| Projection_constructor

Include		 =	"include" Space+ "<" Spacing p:Pathname Spacing ">" Spacing{{
			    value = new Include(false, (char*) p.getValue());
			}} 
			| "include" Space+ <ascii 34> Spacing p:Pathname Spacing <ascii 34> Spacing{{
			    printf("parsed an include\n");
			    value = new Include(true, (char*) p.getValue());
			}}

FP_Parameter	=	rpc_special Spacing s:Specification? rt:Type_form pointers:star* Spacing OPEN Spacing "*" Spacing id:Identifier Spacing CLOSE Spacing OPEN Spacing p:Parameters CLOSE {{
			    std::vector<Parameter*> *params = (std::vector<Parameter*>*) p.getValue();
			    Function *fp = new Function((char*) id.getValue(), new ReturnVariable((Type*) rt.getValue(), count_pointers(pointers), returnVarName())
			    	     	       		, *params, get_current_scope());
			    
			    Parameter *_p = new Parameter(fp, (char *) id.getValue(), 1);
			    set_specs(*_p, s);
			    set_current_scope(get_current_scope()->outer_scope());
			    value = _p;
			    
			}}

FirstParam	=	"projection" Space+ id:Identifier Spacing s:Specification? pointers:star* Spacing field_id:Identifier Spacing OPEN Spacing args:Arguments Spacing CLOSE Spacing COMMA Spacing {{
			    
			    std::vector<Variable*> *arguments = (std::vector<Variable*>*) args.getValue();
			    InitializeType *it = new InitializeType(getType((char*) id.getValue()), *arguments);

			    int p_count = count_pointers(pointers);
			    Parameter *p = new Parameter(it, (char *) id.getValue(), p_count); 
			    set_specs(*p, s);

				if (p->alloc_callee()) {
				   p->set_in(true);
				   p->set_out(true);
				} if (p->alloc_caller()) {
				   p->set_in(true); // not sure correct
				} if (p->dealloc_callee()) {
				   p->set_in(true);
				} if (p->dealloc_caller()) {
				   p->set_in(true);  // not sure correct
				} if (p->bind_callee() && p->alloc_caller()) {
				   p->set_out(true);   
				} if (p->bind_caller()) {
				   p->set_in(true);
				} if (p->bind_callee() && p->alloc_caller()) {
				   p->set_out(true);   
				} if (p->bind_caller()) {
				   p->set_in(true);
				}
			    
			    value = p;    
			}}	

 		|	  t:Type_form s:Specification? pointers:star* Spacing id:Identifier Spacing COMMA Spacing {{
			    int p_count = count_pointers(pointers);
			    Parameter *p = new Parameter((Type *) t.getValue(), (char *) id.getValue(), p_count); 
			    set_specs(*p, s);

				if (p->alloc_callee()) {
				   p->set_in(true);
				   p->set_out(true);
				} if (p->alloc_caller()) {
				   p->set_in(true); // not sure correct
				} if (p->dealloc_callee()) {
				   p->set_in(true);
				} if (p->dealloc_caller()) {
				   p->set_in(true);  // not sure correct
				} if (p->bind_callee() && p->alloc_caller()) {
				   p->set_out(true);   
				} if (p->bind_caller()) {
				   p->set_in(true);
				}
			    
			    value = p;
			}}
			| fp_param:FP_Parameter Spacing COMMA Spacing {{
			    value = fp_param;
			}}

Arrow_or_Dot	= "->" | "."

Access_Start	= "container" | Identifier
Access_End	= Arrow_or_Dot id:Identifier {{
		      value = id;
		  }}
Access		= a1:Access_Start a2:Access_End* {{
		      
		  }}

FP_FirstParam	=	t:Type_form s:Specification? pointers:star* Spacing COMMA Spacing {{
			    FPParameter *fp = new FPParameter((Type*) t.getValue(), count_pointers(pointers));
			    set_specs(*fp, s);

				if (fp->alloc_callee()) {
				   fp->set_in(true);
				   fp->set_out(true);
				} if (fp->alloc_caller()) {
				   fp->set_in(true); // not sure correct
				} if (fp->dealloc_callee()) {
				   fp->set_in(true);
				} if (fp->dealloc_caller()) {
				   fp->set_in(true);  // not sure correct
				} if (fp->bind_callee() && fp->alloc_caller()) {
				   fp->set_out(true);   
				} if (fp->bind_caller()) {
				   fp->set_in(true);
				}
			    
			    value = fp;  
			}}
			| rpc_special Space+ rt:Type_form pointers:star* Spacing OPEN Spacing "*" Spacing id:Identifier Spacing CLOSE Spacing OPEN Spacing p:Parameters CLOSE SEMI Spacing COMMA Spacing {{
			    std::vector<Parameter*> *params = (std::vector<Parameter*>*) p.getValue();
			    Function *fp = new Function((char*) id.getValue(), new ReturnVariable((Type*) rt.getValue(), count_pointers(pointers), returnVarName())
			                                , *params, get_current_scope());

			    set_current_scope(get_current_scope()->outer_scope());
			    value = new FPParameter(fp, 1);
			}}
			  
LastParam	=	"projection" Space+ id:Identifier Spacing s:Specification? pointers:star* Spacing field_id:Identifier Spacing OPEN Spacing args:Arguments Spacing CLOSE Spacing {{
			    
			    std::vector<Variable*> *arguments = (std::vector<Variable*>*) args.getValue();
			    InitializeType *it = new InitializeType(getType((char*) id.getValue()), *arguments);

			    int p_count = count_pointers(pointers);
			    Parameter *p = new Parameter(it, (char *) id.getValue(), p_count); 
			    set_specs(*p, s);

				if (p->alloc_callee()) {
				   p->set_in(true);
				   p->set_out(true);
				} if (p->alloc_caller()) {
				   p->set_in(true); // not sure correct
				} if (p->dealloc_callee()) {
				   p->set_in(true);
				} if (p->dealloc_caller()) {
				   p->set_in(true);  // not sure correct
				} if (p->bind_callee() && p->alloc_caller()) {
				   p->set_out(true);   
				} if (p->bind_caller()) {
				   p->set_in(true);
				}
			    
			    value = p;    
			}}	

 		|   t:Type_form s:Specification? pointers:star* Spacing id:Identifier Spacing {{
			    int p_count = count_pointers(pointers);
			    Parameter *p = new Parameter((Type *) t.getValue(), (char *) id.getValue(), p_count); 
			    set_specs(*p, s);

				if (p->alloc_callee()) {
				   p->set_in(true);
				   p->set_out(true);
				} if (p->alloc_caller()) {
				   p->set_in(true); // not sure correct
				} if (p->dealloc_callee()) {
				   p->set_in(true);
				} if (p->dealloc_caller()) {
				   p->set_in(true);  // not sure correct
				} if (p->bind_callee() && p->alloc_caller()) {
				   p->set_out(true);   
				} if (p->bind_caller()) {
				   p->set_in(true);
				}
			
			    value = p;
			}}
			| fp_param:FP_Parameter Spacing {{
			    value = fp_param;
			}}

FP_LastParam	=	t:Type_form s:Specification? pointers:star* Spacing {{
			    FPParameter *fp = new FPParameter((Type*) t.getValue(), count_pointers(pointers));
			    set_specs(*fp, s);

				if (fp->alloc_callee()) {
				   fp->set_in(true);
				   fp->set_out(true);
				} if (fp->alloc_caller()) {
				   fp->set_in(true); // not sure correct
				} if (fp->dealloc_callee()) {
				   fp->set_in(true);
				} if (fp->dealloc_caller()) {
				   fp->set_in(true);  // not sure correct
				} if (fp->bind_callee() && fp->alloc_caller()) {
				   fp->set_out(true);   
				} if (fp->bind_caller()) {
				   fp->set_in(true);
				}

			    value = fp;
			}}
			|  rpc_special Space+ rt:Type_form pointers:star* Spacing OPEN Spacing "*" Spacing id:Identifier Spacing CLOSE Spacing OPEN Spacing p:Parameters CLOSE SEMI Spacing {{
			    // todo change return type to return variable and add pointer
			    std::vector<Parameter*> *params = (std::vector<Parameter*>*) p.getValue();
			    Function *fp = new Function((char*) id.getValue(), new ReturnVariable((Type*) rt.getValue(), count_pointers(pointers), returnVarName())
			                                , *params, get_current_scope());

			    set_current_scope(get_current_scope()->outer_scope());
			    value = new FPParameter(fp, 1);
			}}

Variable	=	Access | Identifier 

FirstArg	=	id:Identifier Spacing COMMA Spacing {{
			    // look up in scope.
			    Variable *v = getVariable((char*) id.getValue());
			    value = v;    
			}}
LastArg		=	id:Identifier Spacing {{
			    // lookup in scope
			    Variable *v = getVariable((char*) id.getValue());
			    value = v;
			}}

Arguments	=	first:FirstArg* last:LastArg {{
			    std::vector<Variable*> *args = new std::vector<Variable*>();
			    for(Value::iterator it = first.getValues().begin(); it != first.getValues().end(); it ++) { 
			        const Value &v = *it;
				Variable *var = (Variable*) v.getValue();
				args->push_back(var);    
			    }

			    args->push_back((Variable*) last.getValue());
			    value = args;
			}}

Parameters	=	f:FirstParam* l:LastParam {{
			    std::vector<Parameter* > *params = new std::vector<Parameter*>();
			    for(Value::iterator it = f.getValues().begin(); it != f.getValues().end(); it ++)
			    { 
			
				const Value & v = *it;
				Parameter* p = (Parameter* ) v.getValue();
				// put in scope too
				insertVariable(p);
				params->push_back(p);
			    }
			    params->push_back((Parameter* ) l.getValue());
			    value = params; 
			}}

FirstChannel    = "channel" Space+ id:Identifier Spacing COMMA Spacing {{
		    GlobalVariable *gv = new GlobalVariable(getType("cptr_t"), (char*) id.getValue(), 0);
		    insertVariable(gv);
		    value = gv;
		}}

LastChannel     = "channel" Space+ id:Identifier Spacing {{
		    GlobalVariable *gv = new GlobalVariable(getType("cptr_t"), (char*) id.getValue(), 0);
		    insertVariable(gv);
		    value = gv;
		}}

Channels        = f:FirstChannel* l:LastChannel {{
		    std::vector<GlobalVariable*> *channels = new std::vector<GlobalVariable*>();

		    for(Value::iterator it = f.getValues().begin(); it != f.getValues().end(); it ++) {
			        const Value & v = *it;
				GlobalVariable *gv = (GlobalVariable*) v.getValue();
				channels->push_back(gv);
			    }
			    channels->push_back((GlobalVariable*) l.getValue());
			    value = channels;
		}}		  

FP_Parameters	=	f:FP_FirstParam* l:FP_LastParam {{
		            printf("matched fp parameters\n");
			    std::vector<FPParameter* > *params = new std::vector<FPParameter*>();
			    for(Value::iterator it = f.getValues().begin(); it != f.getValues().end(); it ++) { 
			
				const Value & v = *it;
				FPParameter* p = (FPParameter* ) v.getValue();
				params->push_back(p);
			    }
			    params->push_back((FPParameter* ) l.getValue());
			    value = params;
			}}

rpc_special     =      "rpc" {{
		           LexicalScope *tmp = get_current_scope();
			   LexicalScope *new_scope = new LexicalScope(tmp);	
			   // dont need to add to inner scope because rpc do not have type definitinos
			   set_current_scope(new_scope);      
			   value = new_scope;
		       }}


Rpc		=	rpc_special Space+ t:Type_form pointers:star* Spacing id1:Identifier Spacing OPEN Spacing p:Parameters CLOSE SEMI Spacing {{
			    std::vector<Parameter*>* params = (std::vector<Parameter*>*) p.getValue();
			    std::vector<Parameter*> params_ = *params;
			    Rpc* r = new Rpc(new ReturnVariable((Type *) t.getValue(), count_pointers(pointers), returnVarName())
			                                       , (char *) id1.getValue(), params_, get_current_scope());
			    
			    printf("creating an rpc\n");
			    /*
			    int err = get_current_scope()->insert(r);
			    if(!err) {
			        printf("Error rpc already in scope with this name %s.\n", r->name());
		            }
			    */

			    set_current_scope(get_current_scope()->outer_scope()); // leaving current scope
			    value = r; 
			}}  

Projection_constructor =    s:Projection_constructor_special Spacing "<" Spacing t:Proj_type Spacing ">" Spacing id:Identifier Spacing OPEN Spacing c:ProjArgs Spacing CLOSE Spacing OPENC Spacing cf:ChanField* d:Type_Definitions* p:ProjField* Spacing CLOSEC Spacing {{
		       	        std::vector<ProjectionField*> chan_fields;
				for(Value::iterator it = c.getValues().begin(); it != c.getValues().end(); it ++) {
			            const Value &v = *it;
				    ProjectionField *pf = (ProjectionField*) v.getValue();	
				    chan_fields.push_back(pf);
			        }


		       	        std::vector<ProjectionField*> fields;
				std::vector<ProjectionField*> *channels_ = (std::vector<ProjectionField*>*) c.getValue();
				std::vector<ProjectionField*> channels = *channels_;
				for(Value::iterator it = p.getValues().begin(); it != p.getValues().end(); it ++) {
				    const Value & v = *it;
				    std::vector<ProjectionField*> *tmp_ = (std::vector<ProjectionField*>*) v.getValue();
				    std::vector<ProjectionField*> tmp = *tmp_;
				    fields.insert(fields.end(), tmp.begin(), tmp.end());
				}

				ProjectionConstructorType *val = new ProjectionConstructorType((char*) id.getValue(), (char*) t.getValue(), fields, chan_fields, channels);	
				
				// creating container
			    	std::vector<ProjectionField*> container_fields;
			    	container_fields.push_back(new ProjectionField(getType((char*)id.getValue()), (char*)id.getValue(), 0));
				ProjectionField *other_ref = new ProjectionField(getType("cptr_t"), "other_ref", 0);
				other_ref->set_out(true);
			    	container_fields.push_back(other_ref);
				ProjectionField *my_ref = new ProjectionField(getType("cptr_t"), "my_ref", 0);
				my_ref->set_in(true);
				container_fields.push_back(my_ref);
				container_fields.insert(container_fields.end(), channels.begin(), channels.end());
				container_fields.insert(container_fields.end(), chan_fields.begin(), chan_fields.end());
			
			    	const char *container_name_str = container_name((char*)id.getValue());
			    	ProjectionType * container = new ProjectionType(container_name_str, container_name_str, container_fields);
				printf("inserting container with name %s \n", container_name_str);
			    	
			    	// finished creating constructor
 				set_current_scope(get_current_scope()->outer_scope()); // leaving current scope
				insertType((char*) id.getValue(), val); // insert projection constructor
				insertType(container_name_str, container); // insert container
				value = val;
			    }}

Projection_constructor_special = "projection" {{
			       	     LexicalScope *tmp = get_current_scope();
			             LexicalScope *new_scope = new LexicalScope(tmp);
				     tmp->add_inner_scope(new_scope);
				     set_current_scope(new_scope);
				     value = new_scope;
				 }} 

Projection	=	"projection" Spacing "<" Spacing t:Proj_type Spacing ">" Spacing id:Identifier Spacing OPENC Spacing c:ChanField* p:ProjField* CLOSEC Spacing {{

			    std::vector<ProjectionField*> channels;
			    for(Value::iterator it = c.getValues().begin(); it != c.getValues().end(); it ++) {
			        const Value &v = *it;
				ProjectionField *pf = (ProjectionField*) v.getValue();	
				channels.push_back(pf);
			    }
 
			    std::vector<ProjectionField *> fields;
			    for(Value::iterator it = p.getValues().begin(); it != p.getValues().end(); it ++)
			    {
				const Value & v = *it;
				std::vector<ProjectionField*> *tmp_ = (std::vector<ProjectionField*>*) v.getValue();
				std::vector<ProjectionField*> tmp = *tmp_;
				fields.insert(fields.end(), tmp.begin(), tmp.end());
			    } 
			    ProjectionType * val = new ProjectionType((char* ) id.getValue(), (char*) t.getValue(), fields, channels);
			    insertType((char*)id.getValue(), val);

			    // creating constructor
			    std::vector<ProjectionField*> container_fields;
			    container_fields.push_back(new ProjectionField(getType((char*)id.getValue()), (char*)id.getValue(), 0));
			    ProjectionField *other_ref = new ProjectionField(getType("cptr_t"), "other_ref", 0);
			    other_ref->set_out(true);
			    container_fields.push_back(other_ref);
			    ProjectionField *my_ref = new ProjectionField(getType("cptr_t"), "my_ref", 0);
			    my_ref->set_in(true);
			    container_fields.push_back(my_ref);
			    container_fields.insert(container_fields.end(), channels.begin(), channels.end());	    

			    const char *container_name_str = container_name((char*)id.getValue());
			    ProjectionType * container = new ProjectionType(container_name_str, container_name_str, container_fields);
			    printf("inserting projection type with name %s", container_name_str);
			    insertType(container_name_str, container);
			    // finished creating constructor
 
			    value = val;
			 }}
		## what is the point of having a projection without at least one line

Proj_type	=  	"struct" Space+ id:Identifier Spacing {{
			value = id;}}

Keyword		=     	"out" {{ 
			    int * x = new int(OUT);
			    value = x; 
			}}
			| "in" {{ 
			    int * x = new int(IN);
			    value = x; 
			}}
			| "alloc" Spacing OPEN Spacing "caller" Spacing CLOSE {{
			    int *x = new int(ALLOC_CALLER);
			    value = x;
			}}
			| "alloc" Spacing OPEN Spacing "callee" Spacing CLOSE {{
			    int *x = new int(ALLOC_CALLEE);
			    value = x;
			}}
			| "alloc" {{
			    int *x = new int(ALLOC_CALLER | ALLOC_CALLEE);
			    value = x; 
			}}
			| "dealloc" Spacing OPEN Spacing "caller" Spacing CLOSE {{
			    int *x = new int(DEALLOC_CALLER);
			    value = x;
			}}
			| "dealloc" Spacing OPEN Spacing "callee" Spacing CLOSE {{
			    int *x = new int(DEALLOC_CALLEE);
			    value = x;
			}}
			| "dealloc" {{
			    int *x = new int(DEALLOC_CALLEE | DEALLOC_CALLER);
			    value = x;
			}}
			| "bind" Spacing OPEN Spacing "callee" Spacing CLOSE {{
			    int *x = new int(BIND_CALLEE);
			    value = x;
			}}
			| "bind" Spacing OPEN Spacing "caller" Spacing CLOSE {{
			    int *x = new int(BIND_CALLER);
			    value = x;
			}}
			| "bind" {{
			    int *x = new int(BIND_CALLER | BIND_CALLEE);
			    value = x;
			}}

Start		=	k:Keyword Spacing COMMA Spacing {{ value = k; }}

Specification	=	OPENS Spacing s:Start* l:Last CLOSES Spacing {{
			    unsigned int *spec = new unsigned int();
			    for(Value::iterator it = s.getValues().begin(); it != s.getValues().end(); it ++) {		    
			    const Value & v = *it;
			    int* x = (int*) v.getValue();
			    if(!x) {
			        printf("error x is null\n");
				exit(0);       
			    }
			    *spec |= *x;
			    }
			    int * y = (int *) l.getValue();
			    if(!y) { 
			        printf("error y is null\n"); exit(0); 
			    }
			    *spec |= *y;
			    value = spec;
			}}

FirstProjArg    =      "channel" Space+ id:Identifier Spacing COMMA Spacing {{
		           ProjectionField *pf = new ProjectionField(getType("cptr_t"), (char*) id.getValue(), 0);
			   insertVariable(pf); 
			   value = pf;
		       }}

LastProjArg     =      "channel" Space+ id:Identifier Spacing {{
		           ProjectionField *pf = new ProjectionField(getType("cptr_t"), (char*) id.getValue(), 0);
			   insertVariable(pf);
			   value = pf;
		       }}

ProjArgs        =       f:FirstProjArg* l:LastProjArg {{
			    std::vector<ProjectionField*> *channels = new std::vector<ProjectionField*>();

		    	    for(Value::iterator it = f.getValues().begin(); it != f.getValues().end(); it ++) {
			        const Value & v = *it;
				ProjectionField *gv = (ProjectionField*) v.getValue();
				channels->push_back(gv);
			    }
			    channels->push_back((ProjectionField*) l.getValue());
			    value = channels;
			}}

ChanField       =       "channel" Space+ s:Specification? Spacing id:Identifier Spacing SEMI Spacing {{
			    ProjectionField *pf = new ProjectionField(getType("cptr_t"), (char*) id.getValue(), 0);
			    insertVariable(pf);
			    set_specs(*pf, s);

				if (pf->alloc_callee()) {
				   pf->set_in(true);
				   pf->set_out(true);
				} if (pf->alloc_caller()) {
				   pf->set_in(true); // not sure correct
				} if (pf->dealloc_callee()) {
				   pf->set_in(true);
				} if (pf->dealloc_caller()) {
				   pf->set_in(true);  // not sure correct
				} if (pf->bind_callee() && pf->alloc_caller()) {
				   pf->set_out(true);   
				} if (pf->bind_caller()) {
				   pf->set_in(true);
				}

			    value = pf;
			}}

ProjField	=	"projection" Space+ id:Identifier Spacing s:Specification? pointers:star* Spacing field_id:Identifier Spacing OPEN Spacing args:Arguments Spacing CLOSE Spacing SEMI Spacing {{
			    std::vector<Variable*> *arguments = (std::vector<Variable*>*) args.getValue();
	            InitializeType *it = new InitializeType(getType((char*) id.getValue()), *arguments);
			    ProjectionField *pf = new ProjectionField(it, (char*) field_id.getValue(), count_pointers(pointers));
			    set_specs(*pf, s);

				if (pf->alloc_callee()) {
				   pf->set_in(true);
				   pf->set_out(true);
				} if (pf->alloc_caller()) {
				   pf->set_in(true); // not sure correct
				} if (pf->dealloc_callee()) {
				   pf->set_in(true);
				} if (pf->dealloc_caller()) {
				   pf->set_in(true);  // not sure correct
				} if (pf->bind_callee() && pf->alloc_caller()) {
				   pf->set_out(true);   
				} if (pf->bind_caller()) {
				   pf->set_in(true);
				}

			    std::vector<ProjectionField*> *fields = new std::vector<ProjectionField*>();
			    fields->push_back(pf);
			    value = fields; 
			    
			}}
			| t:Type_form Spacing s:Specification? pointers:star* Spacing id:Identifier Spacing SEMI Spacing {{ 

			    ProjectionField *pf = new ProjectionField((Type *) t.getValue(), (char *) id.getValue(), count_pointers(pointers));
			    set_specs(*pf, s);

				if (pf->alloc_callee()) {
				   pf->set_in(true);
				   pf->set_out(true);
				} if (pf->alloc_caller()) {
				   pf->set_in(true); // not sure correct
				} if (pf->dealloc_callee()) {
				   pf->set_in(true);
				} if (pf->dealloc_caller()) {
				   pf->set_in(true);  // not sure correct
				} if (pf->bind_callee() && pf->alloc_caller()) {
				   pf->set_out(true);   
				} if (pf->bind_caller()) {
				   pf->set_in(true);
				}
			    
			    std::vector<ProjectionField*> *fields = new std::vector<ProjectionField*>();
			    fields->push_back(pf);
			    value = fields; 
			}}
			| rpc_special Spacing s:Specification? rt:Type_form pointers:star* Spacing OPEN Spacing "*" Spacing id:Identifier Spacing CLOSE Spacing OPEN Spacing p:Parameters CLOSE SEMI Spacing {{

			    std::vector<Parameter*> *params = (std::vector<Parameter*>*) p.getValue();
			    Function *fp = new Function((char*) id.getValue(), new ReturnVariable((Type*) rt.getValue(), count_pointers(pointers), returnVarName())
			                               , *params, get_current_scope());
			    ProjectionField *pf = new ProjectionField(fp, (char*) id.getValue(), 1);
			    set_specs(*pf, s);

			    std::vector<ProjectionField*> *fields = new std::vector<ProjectionField*>();
			    fields->push_back(pf);

			    set_current_scope(get_current_scope()->outer_scope());
			    value = fields;
			}}
			| pc_unnamed_scope

Last		=	k:Keyword Spacing {{ value = k; }}

Option		=	"projection"

star 		= 	[*]

signed_type	=	"int" Spacing {{ 
			    printf("matched int type\n");
			    value = getType("int");
			}}
			| "char" Spacing {{
			    value = getType("char"); 
			}}   
			| "capability" Spacing {{ 
			    value = getType("capability"); 
			}}
			| "short" Spacing {{ 
			    value = getType("short");
			}}
			| "long"  Space+ "long" Space* Spacing {{
		 	    value = getType("long long");
			}}
			| "long" Spacing{{ 
			    value = getType("long"); 
			}}
			| "float" Spacing {{
			    value = getType("float");
			}}		
			| "double" Spacing {{
			    value = getType("double");
			}}
			| "bool" Spacing {{
			    value = getType("bool");
			}}

unsigned_type	=	"unsigned" Space+ "int" Spacing {{ 
			    value = getType("unsigned int"); 
			}} 
			| "unsigned" Space+ "char" Spacing {{ 
			    value = getType("unsigned char"); 
			}} 
			| "unsigned" Space+ "short" Spacing {{ 
			    value = getType("unsigned short"); 
			}} 
			| "unsigned" Space+ "long" Space+ "long" {{ 
			    value = getType("unsigned long long"); 
			}}
			| "unsigned" Space+ "long" Spacing {{ 
			    value = getType("unsigned long"); 
			}}

type 		=	unsigned_type
			| signed_type
			| "void" Spacing {{ value = getType("void"); }}

## just ignore the modules ones, not supporting right now

Type_form	=	"projection" Space+ n:Identifier Spacing {{
			    value = getType((char*)n.getValue()); 
			}}
			| "channel" Spacing {{  // todo
			    value = new Channel();
			}}
			| type

Spacing		=	Space*

EndSpacing	=	EndSpace* 

Space		=	" " | "\t" | EndOfLine | Comment | Line_comment

EndSpace	= 	Space | Line_comment

EndOfLine	=	"\n" | "\r"

Comments	= 	Comment | Line_comment

Comment		=	Comment_start Comment_rest

Comment_rest	=	Comment_end
			| . Comment_rest

Comment_start	=	"/*"
Comment_end	=	"*/"


Line_comm_rest	=	Line_comm_end
			| . Line_comm_rest

Line_comm_start	=	"//"

Line_comment	=	Line_comm_start Line_comm_rest

Line_comm_end	=	"\n"

OPEN		=	"("
CLOSE		=	")"
SEMI		=	";"	
OPENC		=	"{"
CLOSEC		=	"}"
OPENA		=	"<"
CLOSEA		=	">"
OPENS		=	"["
CLOSES		=	"]"
COMMA		=	","
