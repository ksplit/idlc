start-symbol: File


include: {{ #include "lcd_ast.h"
	    #include "error.h"
	    #include <vector>
	    #include <stdlib.h>
	    #include <string>
	    #include <stdint.h> }}

code: {{
      static FileScope* fs_instance;
      FileScope* current_file_scope()
      {
	if(!fs_instance)
	{
		fs_instance = new FileScope(RootScope::instance());
	}
	return fs_instance;
      }

           Type * getType(const char* type)
      {	   
      	   printf("in getType type is: %s\n", type);
      	   int err;
      	   FileScope* rs = current_file_scope();
	   Type* val = rs->lookup_symbol(type, &err);
	   if(!val)
	   {	
	   	printf("val is null\n");
	   }
	   
	   if(!err)
	   { 
	     ErrorReport* er = ErrorReport::instance();
	     er->set_error();
	     printf("Error looking up type: %s\n", type);
	     return 0; // continue execution
	   }
	    return val;
      }	

      Type* count_pointers(Value v, const char* type)
      {
	   Type *t = getType(type);
	   printf("here22222\n");
	   for(Value::iterator it = v.getValues().begin(); it != v.getValues().end(); it++)
	   {
		const Value & v = *it;
		char star = (char) (intptr_t) v.getValue();
		if(star == '*')
		{
		 printf("here333\n");
		 t = new PointerType(t);		
		}
		else
		{
			printf("Not a star\n");
		}
	   }
	   printf("here444\n");
	   return t;	
      }			

      void insertType(const char * sym, Type * val) // should this be void?
      {
	FileScope *fs = current_file_scope();
	int ret = fs->insert_symbol(sym, val);
	if(!ret)
	{
		ErrorReport* er = ErrorReport::instance();
	     er->set_error();
	}
	
      }	
}}

rules:

Identifier	=	i1:IdentStart i2:IdentCont* {{ 
			std::ostringstream total;
			total << (char) (intptr_t) i1.getValue();

		   	for(Value::iterator it = i2.getValues().begin(); it != i2.getValues().end(); it ++)
		   	{
				const Value & v = *it;
				char letter = (char) (intptr_t) v.getValue();
				total << letter;
		   	}
				std::string str = total.str();
				printf("identifier is: %s\n", str.c_str());
		   		value.value = malloc(str.length()+1);
				printf("hereeeee\n");
				strncpy((char*)value.value, str.c_str(), str.length()+1); }}

IdentStart	=	[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_]

IdentCont	=	IdentStart | [0123456789]

File		=	Spacing v:Verbatim? d:Type_Definitions* t:Rpc* <eof> {{
			std::vector<Rpc *> rpcs;
			printf("in file matched everything\n");
			for(Value::iterator it = t.getValues().begin(); it != t.getValues().end(); it ++)
			{
				printf("in this loop");
				const Value & v = *it;
				Rpc * rp = (Rpc *) v.getValue();
				rpcs.push_back(rp);

			}
			  value = new File((char*) v.getValue(), current_file_scope(), rpcs); }}

Typedef		=	 "typedef" Spacing "<" Spacing rt:RealType Spacing "," Spacing mt:Type_form ">" Spacing id:Identifier Spacing {{ 
			 Typedef * val = new Typedef((char*) rt.getValue(), (Type*) mt.getValue());
			 insertType((char*)id.getValue(),val);
			 }}

Verbatim	=	 "verbatim" Spacing "[" contents:VerbatimContent "]" {{ std::ostringstream total;
			for(Value::iterator it = contents.getValues().begin(); it != contents.getValues().end(); it ++)
			{
			const Value &v = *it;
			char letter = (char) (intptr_t) v.getValue();
			total << letter;     
			}
			std::string str = total.str();
			value = &str[0]; }}

VerbatimContent =	!"]" .

RealType	=	fp:Identifier? Spacing sp:Identifier Spacing {{ //temporary solution
			std::ostringstream total;	     
			total << fp.getValue() << ' ' << sp.getValue();
			std::string str = total.str();
			value = &str[0];
			}}		

String		=	<ascii 34> l:any_letter+ <ascii 34> {{
			std::ostringstream total;
			for(Value::iterator it = l.getValues().begin(); it != l.getValues().end(); it ++)
			{
				const Value & v = *it;
				char letter = (char) (intptr_t) v.getValue();
				
				if(letter == '\\')
				{
					if((it++) == l.getValues().end())
					{
						total << letter;
						break;
					}	
					
					letter = (char) (intptr_t) (*it).getValue();
					switch (letter)
					{
					case 'n':
					     total <<'\n';
					     break;
					case 't':
					     total << '\t';
					     break;
					default:
						total << letter;
					}
					continue;
				}
				total << letter;
			}
			std::string str = total.str();
			value = str.c_str(); }}

any_letter	=	[_.,/?<>'; =:%`!@#$^&*()-+{}|\\ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789]

Type_Definitions=	Typedef | Projection

Include		=	"#include" Space+ "<" Spacing f:Identifier Spacing ">" Spacing {{
			std::ostringstream total;
			total << "#include <" << (char *) f.getValue() << ">";
			std::string str = total.str();
			value = str.c_str(); }}
			
			| "#include" Space+ s:String Spacing {{
			std::ostringstream total;
			total << "#include " << (char *) s.getValue();
			std::string str = total.str();
			value = str.c_str(); }}

FirstParam	=	t:Type_form id:Identifier Spacing COMMA Spacing {{
			printf("first param: id is %s\n", (char*) id.getValue());
			value = new Parameter((Type *) t.getValue(), (char *) id.getValue()); }} 
			  

LastParam	=	t:Type_form id:Identifier Spacing {{
			printf("last param: id is %s\n", (char*) id.getValue());
			value = new Parameter((Type *) t.getValue(), (char *) id.getValue()); }}

Parameters	=	f:FirstParam* l:LastParam {{
			std::vector<Parameter* >* params = new std::vector<Parameter*>();
			for(Value::iterator it = f.getValues().begin(); it != f.getValues().end(); it ++)
			{ 
				const Value & v = *it;
				Parameter* p = (Parameter* ) v.getValue();
				params->push_back(p);
			}
			params->push_back((Parameter* ) l.getValue());
			value = params; }}

Rpc		=	"rpc" Space+ t:Type_form id1:Identifier Spacing OPEN p:Parameters CLOSE SEMI Spacing {{
			printf("rpc value of id is: %s\n", (char *) id1.getValue());
			std::vector<Parameter*>* params = (std::vector<Parameter*>*) p.getValue();
			std::vector<Parameter*> params_ = *params;
			printf("before rpc\n");
			Rpc* r = new Rpc((Type *) t.getValue(), (char *) id1.getValue(), params_);
			printf("after rpc\n");
			value = r; }}  




Projection	=	"projection" Space+ id:Identifier Spacing "<" Spacing t:Proj_type ">" Spacing OPENC Spacing p:ProjField+ CLOSEC Spacing {{ std::vector<ProjectionField *> p_fields;
			for(Value::iterator it = p.getValues().begin(); it != p.getValues().end(); it ++)
			{
				const Value & v = *it;
				ProjectionField * p = (ProjectionField *) v.getValue();
				p_fields.push_back(p);
			} 
			// insert projection into rootscope for now
			ProjectionType * val = new ProjectionType((char* ) id.getValue(), (char* ) t.getValue(), p_fields);
			insertType((char*)id.getValue(), val);
			 }}
		## what is the point of having a projection without at least one line

Proj_type	=  	"struct" Space+ id:Identifier Spacing {{
			std::ostringstream total;
			total << "struct " << (char *) id.getValue();
			std::string str = total.str();
			value = &str[0]; }}

Keyword		=     	"out" {{ int * x = (int *) malloc(sizeof(int));
			      *x = 1;
			      value = x; }}
			| "in" {{ int * x = (int *) malloc(sizeof(int));
			       *x = 2; 
			       value = x; }}
			| "bind" {{ int * x = (int *) malloc(sizeof(int));
			  	 *x = 3; 
			  	 value = x; }}
			| "alloc" {{ int * x = (int *) malloc(sizeof(int));
			  	  *x = 4;
				  value = x; }}
			
Start		=	k:Keyword Spacing COMMA Spacing {{ value = k; }}

Specification	=	s:Start* l:Last {{
			std::vector<bool>* specs = new std::vector<bool>(4, false);
			for(Value::iterator it = s.getValues().begin(); it != s.getValues().end(); it ++)
			{
				const Value & v = *it;
				int* x = (int*) v.getValue();
				if(!x)
				{
					printf("error x is null\n");
					exit(0);       
				}
				specs->at(*x -1) = true;
			}
			int * y = (int *) l.getValue();
			if(!y) { printf("error y is null\n"); exit(0); }
			specs->at(*y-1) = true;
			value = specs; }}

ProjField	=	OPENS Spacing s:Specification CLOSES Spacing t:Type_form id:Identifier Spacing SEMI Spacing {{ 
			bool in = false; bool out = false; bool bind = false; bool alloc = false;
			std::vector<bool>* specs = (std::vector<bool>*) s.getValue();
			printf("In Proj field\n");
			int i = 1;
			printf("%zu", specs->size());
			for(std::vector<bool>::iterator it = specs->begin(); it != specs->end(); it ++)
			{
				printf("in for loop\n");
				if(*it)
				{
				if(i == 0)
				     out = true;
				else if(i == 1)
				     in = true;
				else if(i == 2)
				     bind = true;
				else
					alloc = true;
				}				
				i += 1;
			}
			printf("about to construct projection field\n");
			value = new ProjectionField(in, out, alloc, bind, (Type *) t.getValue(), (char *) id.getValue()); }}


Last		=	k:Keyword Spacing {{ value = k; }}

Option		=	"projection"

Comment		=	Comment_start Comment_rest

Comment_rest	=	Comment_end
			| . Comment_rest

Comment_start	=	"/*"
Comment_end	=	"*/"


Line_comm_rest	=	Line_comm_end
			| . Line_comm_rest

Line_comm_start	=	"//"

Line_comment	=	Line_comm_start Line_comm_rest


Line_comm_end	=	"\n"

star = [*]

signed_type	=	"int" Space* ps:star* Space+{{ value = count_pointers(ps, "int");}}
			| "char" Space* ps:star* Space+ {{ value = count_pointers(ps, "char"); }}   
			| "capability" Space+ {{ value = getType("capability"); }}
			| "short" Space* ps:star* Space+ {{ value = count_pointers(ps, "short");}}
			| "long"  Space+ "long" Space* ps:star* Space+ {{ value = count_pointers(ps, "long long");}}
			| "long" Space* ps:star* Space+ {{ value = count_pointers(ps, "long"); }}

			| "int" Space+ ps:star* Space*{{ value = count_pointers(ps, "int");}}
			| "char" Space+ ps:star* Space*{{ value = count_pointers(ps, "char"); }}   
			| "short" Space+ ps:star* Space* {{ value = count_pointers(ps, "short");}}
			| "long" Space+ "long" Space+ ps:star* Space* {{ value = count_pointers(ps, "long long");}}
			| "long"  Space+ ps:star* Space*{{ value = count_pointers(ps, "long"); }}

unsigned_type	=	"unsigned" Space+ "int" ps:star* Space+ {{ value = count_pointers(ps, "unsigned int"); }} 
			| "unsigned" Space+ "char" ps:star* Space+ {{ value = count_pointers(ps, "unsigned char"); }} 
			| "unsigned" Space+ "short" ps:star* Space+ {{ value = count_pointers(ps, "unsigned long"); }} 
			| "unsigned" Space+ "long" Space+ "long" ps:star* Space+ {{ value = count_pointers(ps, "unsigned long long"); }}
			| "unsigned" Space+ "long" ps:star* Space+ {{ value = count_pointers(ps, "unsigned long"); }}
			| "unsigned" Space+ "int" Space+ ps:star* {{ value = count_pointers(ps, "unsigned int"); }} 
			| "unsigned" Space+ "char" Space+ ps:star* {{ value = count_pointers(ps, "unsigned char"); }} 
			| "unsigned" Space+ "short" Space+ ps:star* {{ value = count_pointers(ps, "unsigned long"); }} 
			| "unsigned" Space+ "long" Space+ "long" Space+ ps:star* {{ value = count_pointers(ps, "unsigned long long"); }}
			| "unsigned" Space+ "long" Space+ ps:star* {{ value = count_pointers(ps, "unsigned long"); }}  
  

type 		=	unsigned_type
			| signed_type
			| "void" Space+ {{ value = getType("void"); }}

## just ignore the modules ones, not supporting right now

Spacing		=	Space*

Type_form	=	"projection" Space+ n:Identifier Space* "*" Spacing {{
			printf("projection pointer name is: %s\n", (char*)n.getValue());
			 printf("calling getType 2\n");
			value = new PointerType(getType((char*)n.getValue())); }}
			| "projection" Space+ name:Identifier Space+ {{ 
			  printf("calling getType 1\n");
			  value = getType((char*)name.getValue()); }}
			| type	



Space		=	" " | "\t" | EndOfLine
EndOfLine	=	"\n" | "\r"

OPEN		=	"("
CLOSE		=	")"
SEMI		=	";"	
OPENC		=	"{"
CLOSEC		=	"}"
OPENA		=	"<"
CLOSEA		=	">"
OPENS		=	"["
CLOSES		=	"]"
COMMA		=	","