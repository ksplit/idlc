module kernel {
    rpc void netif_carrier_on( projection dev  *dev ) {
        projection < struct net_device > dev {
            projection dev_netdev_ops *netdev_ops;
        }
    }
    rpc void netif_carrier_off( projection dev  *dev ) {
        projection < struct net_device > dev {
        }
    }
    rpc void free_percpu(  ) {
    }
    rpc u32 register_netdevice( projection dev *dev ) {
        projection < struct net_device > dev {
            u64 [out] features;
            u64 [out] hw_features;
            u64 [out] hw_enc_features;
            projection dev_netdev_ops *netdev_ops;
            projection dev_ethtool_ops *ethtool_ops;
            u32  flags;
            u32  priv_flags;
            u8  addr_assign_type;
            array<u8, var_len>* dev_addr;
            projection dev_rtnl_link_ops *rtnl_link_ops;
        }
    }
    rpc void consume_skb( projection skb *skb ) {
        projection < struct sk_buff > skb {
            u32  len;
        }
    }
    rpc projection ret_net_device [alloc(caller)]* alloc_netdev_mqs( u32 sizeof_priv, string *name, u8 name_assign_type, rpc_ptr setup setup, u32 txqs, u32 rxqs ) {
        projection < struct net_device > ret_net_device {
            u64  features;
            u64  hw_features;
            u64  hw_enc_features;
            projection ret_net_device_netdev_ops *netdev_ops;
            projection ret_net_device_ethtool_ops [alloc(caller), out] *ethtool_ops;
            u32  flags;
            u32 [out] priv_flags;
            u8  addr_assign_type;
            array<u8, var_len>* dev_addr;
            projection ret_net_device_rtnl_link_ops *rtnl_link_ops;
        }
    }
    rpc void free_netdev( projection dev *dev ) {
        projection < struct net_device > dev {
            u64  features;
            u64  hw_features;
            u64  hw_enc_features;
            projection dev_netdev_ops *netdev_ops;
            projection dev_ethtool_ops *ethtool_ops;
            u32  flags;
            u32  priv_flags;
            u8  addr_assign_type;
            array<u8, var_len>* dev_addr;
            projection dev_rtnl_link_ops *rtnl_link_ops;
        }
    }
    rpc void rtnl_lock(  ) {
    }
    rpc void rtnl_unlock(  ) {
    }
    rpc void rtnl_link_unregister( projection dev_rtnl_link_ops [dealloc(callee)]*ops ) {
    }
    rpc void __rtnl_link_unregister( projection dev_rtnl_link_ops [dealloc(callee)]*ops ) {
    }
    rpc u32 __rtnl_link_register( projection dev_rtnl_link_ops *ops ) {
    }

	//  TODO: is this used?
	// 	NOTE: does not appear in nullnet_vmfunc glue layer
	//	// TODO: void* return
	//	// NOTE: could marshal as array<u8, size>, if arguments are siblings of the retval
	//	rpc projection void_placeholder* __alloc_percpu_gfp( u64 size, u64 align, u32 gfp ) {
	//	}

	projection <struct i_do_not_exist> void_placeholder {}

    rpc void ether_setup( projection dev *dev ) {
        projection < struct net_device > dev {
            u32 [out] flags;
            u32 [out] priv_flags;
        }
    }
    rpc u32 eth_validate_addr( projection dev *dev ) {
        projection < struct net_device > dev {
            array<u8, var_len>* dev_addr;
        }
    }

	// TODO: there is a void* static here
    rpc u32 eth_mac_addr( projection dev *dev, projection p *p ) {
        projection < struct net_device > dev {
            u32  priv_flags;
            array<u8, var_len>* dev_addr;
        }
        projection < struct sockaddr > p {
        }
    }
    rpc u32 dummy_init_module(  ) {
    }
    rpc_ptr void setup( projection dev *dev ) {
        projection < struct net_device > dev {
            u64 [out] features;
            u64 [out] hw_features;
            u64 [out] hw_enc_features;
            projection dev_netdev_ops[out] *netdev_ops;
            projection dev_ethtool_ops[out] *ethtool_ops;
            u32 [out] flags;
            u32 [out] priv_flags;
            u8  addr_assign_type;
            array<u8, var_len>* dev_addr;
        }
    }
    rpc_ptr void get_drvinfo( projection dev *dev, projection info *info ) {
        projection < struct net_device > dev {
        }
        projection < struct ethtool_drvinfo > info {
            array<u8, 32>  driver;
            array<u8, 32>  version;
        }
    }
    rpc_ptr u32 ndo_init( projection dev *dev ) {
        // TODO: who gets marshaled here?
		projection < struct net_device > dev {
                // FIXME: marshal this
				// void* [out] ml_priv;
                projection dev_lstats[out] *lstats;
                projection dev_tstats[out] *tstats;
                projection dev_dstats[out] *dstats;
                projection dev_vstats[out] *vstats;
        }
        projection < struct pcpu_lstats > dev_lstats {
        }
        projection < struct pcpu_sw_netstats > dev_tstats {
        }
        projection < struct pcpu_dstats > dev_dstats {
        }
        projection < struct pcpu_vstats > dev_vstats {
        }
    }
    rpc_ptr void ndo_uninit( projection dev *dev ) {
        // TODO: who gets marshaled here?
        projection < struct net_device > dev {
                // FIXME: marshal this
				// void*  ml_priv;
                projection dev_lstats *lstats;
                projection dev_tstats *tstats;
                projection dev_dstats *dstats;
                projection dev_vstats *vstats;
        }
        projection < struct pcpu_lstats > dev_lstats {
        }
        projection < struct pcpu_sw_netstats > dev_tstats {
        }
        projection < struct pcpu_dstats > dev_dstats {
        }
        projection < struct pcpu_vstats > dev_vstats {
        }
    }

	// NOTE: enum replaced with u32 here (retval)
    rpc_ptr u32 ndo_start_xmit( projection skb *skb, projection dev *dev ) {
        projection < struct sk_buff > skb {
            u32  len;
        }

		// TODO: who gets marshaled
        projection < struct net_device > dev {
                // FIXME: marshal this
				// void*  ml_priv;
                projection dev_lstats *lstats;
                projection dev_tstats *tstats;
                projection dev_dstats *dstats;
                projection dev_vstats *vstats;
        }
        projection < struct pcpu_lstats > dev_lstats {
        }
        projection < struct pcpu_sw_netstats > dev_tstats {
        }
        projection < struct pcpu_dstats > dev_dstats {
        }
        projection < struct pcpu_vstats > dev_vstats {
        }
    }
    rpc_ptr void ndo_set_rx_mode( projection dev *dev ) {
        projection < struct net_device > dev {
        }
    }
    rpc_ptr projection ret_rtnl_link_stats64* ndo_get_stats64( projection dev *dev, projection stats *stats ) {
        // TODO: who gets marshaled here?
		projection < struct net_device > dev {
                // FIXME: marshal this
				// void*  ml_priv;
                projection dev_lstats *lstats;
                projection dev_tstats *tstats;
                projection dev_dstats *dstats;
                projection dev_vstats *vstats;
        }
        projection < struct pcpu_lstats > dev_lstats {
        }
        projection < struct pcpu_sw_netstats > dev_tstats {
        }
        projection < struct pcpu_dstats > dev_dstats {
        }
        projection < struct pcpu_vstats > dev_vstats {
        }
        projection < struct rtnl_link_stats64 > stats {
            u64 [out] tx_packets;
            u64 [out] tx_bytes;
        }
        projection < struct rtnl_link_stats64 > ret_rtnl_link_stats64 {
        }
    }
    rpc_ptr u32 ndo_change_carrier( projection dev *dev, bool new_carrier ) {
        projection < struct net_device > dev {
        }
    }
    rpc_ptr u32 validate( projection tb **tb, projection data **data ) {
        projection < struct nlattr > tb {
        }
        projection < struct nlattr > data {
        }
    }
    rpc void dummy_cleanup_module(  ) {
    }
	projection < struct net_device_ops > dev_netdev_ops {
		rpc_ptr ndo_init ndo_init;
		rpc_ptr ndo_uninit ndo_uninit;
		rpc_ptr ndo_start_xmit ndo_start_xmit;
		rpc_ptr ndo_set_rx_mode ndo_set_rx_mode;
		rpc_ptr ndo_get_stats64 ndo_get_stats64;
		rpc_ptr ndo_change_carrier ndo_change_carrier;
	}

	projection < struct ethtool_ops > dev_ethtool_ops {
		rpc_ptr get_drvinfo get_drvinfo;
	}
	
	projection < struct rtnl_link_ops > dev_rtnl_link_ops {
		rpc_ptr setup setup;
		rpc_ptr validate validate;
	}
}