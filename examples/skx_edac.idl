MODUle kernel {

	rpc_ptr int notifier_call( projection nb * [unused] nb,
			long unsigned int [unused] val,
			void [alloc(callee), sizeof(struct mce)] *  data ) {

		projection < struct notifier_block > nb {
			rpc_ptr notifier_call notifier_call;
		}
	}

	/*
	rpc_ptr int open( projection inode *  inode, projection file *  file ) {
		projection < struct inode > inode {
		}
		projection < struct file > file {
		}
	}*/

	rpc int pci_enable_device( projection dev *  dev ) {
		projection < struct pci_dev > dev {
		}
	}

	/* FIXME: Disable debugfs for now
	rpc void debugfs_remove_recursive( projection dentry *  dentry ) {
		projection < struct dentry > dentry {
		}
	}*/

	rpc projection ret_x86_cpu_id [alloc(caller)] * x86_match_cpu(
			array<projection match, null> [alloc(callee)] match ) {
		projection < struct x86_cpu_id > ret_x86_cpu_id {
			unsigned short vendor;
			unsigned short family;
			unsigned short model;
			unsigned short feature;	
			unsigned long long driver_data;
		}
		projection < struct x86_cpu_id > match {
			unsigned short vendor;
			unsigned short family;
			unsigned short model;
			unsigned short feature;
			unsigned long long driver_data;
		}
	}

	rpc projection ret_pci_dev [bind(caller)] * pci_dev_get( projection dev *  dev ) {
		projection < struct device> device{
		}
		projection < struct pci_dev > ret_pci_dev {
			projection device dev;
		}
		projection < struct device> device{
		}
		projection < struct pci_dev > dev {
			projection device dev;
		}
	}

	rpc void pci_dev_put( projection dev *  dev ) {
		projection < struct device> device{
		}
		projection < struct pci_dev > dev {
			projection device dev;
		}
	}

	rpc void mce_unregister_decode_chain( 
		projection notifier_block [bind(callee), dealloc(callee)] *nb) {
	}

	rpc void mce_register_decode_chain( projection notifier_block [alloc(callee)] *nb) {
	}

	/* FIXME: Let's discard debugfs for now
	rpc projection ret_dentry* debugfs_create_dir( char*  name, projection parent *  parent ) {
		projection < struct dentry > ret_dentry {
		}
		projection < struct dentry > parent {
		}
	}
	rpc projection ret_dentry* debugfs_create_file( char*  name, unsigned short  mode, projection parent *  parent, void*  data, projection fops *  fops ) {
		projection < struct dentry > ret_dentry {
		}
		projection < struct dentry > parent {
		}
		projection < struct file_operations > fops {
			rpc_ptr open open;
		}
	}
	rpc long long int generic_file_llseek( projection file *  file, long long int  offset, int  whence ) {
		projection < struct file > file {
		}
	}
	rpc long int simple_attr_read( projection file *  file, char*  buf, long unsigned int  len, long long int*  ppos ) {
		projection < struct file > file {
		}
	}
	rpc long int simple_attr_write( projection file *  file, char*  buf, long unsigned int  len, long long int* [unused] ppos ) {
		projection < struct file > file {
		}
	}
	rpc int simple_attr_release( projection inode * [unused] inode, projection file *  file ) {
		projection < struct inode > inode {
		}
		projection < struct file > file {
		}
	}
	rpc int simple_attr_open( projection inode *  inode, projection file *  file, rpc_ptr  get get, rpc_ptr  set set, char*  fmt ) {
		projection < struct inode > inode {
		}
		projection < struct file > file {
		}
	} */
	rpc void edac_mc_handle_error( unsigned int  type,
		projection mci * mci, unsigned short  error_count,
		long unsigned int  page_frame_number, long unsigned int  offset_in_page,
		long unsigned int  syndrome, int  top_layer, int  mid_layer,
		int  low_layer, string [alloc(callee)] *msg,
		string [alloc(callee)] * other_detail ) {

		projection < struct mem_ctl_info > mci {
			int  mc_idx;
			unsigned int  n_layers;
			projection layers* layers;
			projection dimms* dimms;
		}
		projection < struct edac_mc_layer > layers {
		}
		projection < struct dimm_info > dimms {
		}
	}

	rpc projection ret_mem_ctl_info* edac_mc_del_mc( projection dev [bind(callee)] *  dev ) {
		projection < struct mem_ctl_info > ret_mem_ctl_info {
			int  mc_idx;
		}
		projection < struct device > dev {
		}
	}
		har*  dev_name;
	rpc int edac_mc_add_mc_with_groups( projection mci *  mci,
			projection groups ** [unused]  groups ) {
		projection < struct mem_ctl_info > mci {
			int  mc_idx;
			projection dimms * dimms;
			string [alloc(callee)] *  ctl_name;
			unsigned long mtype_cap;
			unsigned long edac_ctl_cap;
			unsigned long edac_cap;
			string [alloc(callee)] *  mod_name;
			string [alloc(callee)] *  dev_name;
			string [alloc(callee)] *  mod_ver;
			projection device [alloc(callee)] *pdev;	
		}

		projection < struct dimm_info > dimms {
			u32 grain;
			u32 dtype;
			u32 mtype;
			u32 edac_mode;
			u32 nr_pages;
			array<char, 32> label;
		}

		projection < struct attribute_group > groups {
		}
	}

	rpc void edac_mc_free( projection mci [dealloc(caller)] *  mci ) {
		projection < struct mem_ctl_info > mci {
		}
	}

	// FIXME: need array_sized
	rpc projection ret_mem_ctl_info [alloc(caller)] * edac_mc_alloc(
		unsigned int  mc_num,
		unsigned int  n_layers,
		array<projection layers, n_layers> [out] layers,
		unsigned int  sz_pvt ) {

		projection < struct mem_ctl_info > ret_mem_ctl_info {
			int  mc_idx;
			unsigned int  n_layers;
			unsigned int tot_dimms;
			// FIXME: need alloc_sized
			projection ret_layers [alloc_sized<n_layers>(caller)] * layers;
			projection ret_dimms [alloc_sized<tot_dimms>(caller)] * dimms;
			void*  pvt_info;
		}

		projection < struct edac_mc_layer > ret_layers {
		}

		// TODO:
		projection < struct dimm_info > ret_dimms {
		}

		projection < struct edac_mc_layer > layers {
		}
	}

	rpc projection ret_pci_dev [alloc(caller)] * pci_get_device( unsigned int  vendor,
			unsigned int  device, projection from * [unused] from ) {
		projection < struct pci_dev > ret_pci_dev {
		}
		projection < struct pci_dev > from {
		}
	}

	// FIXME: need member_of
	rpc int pci_bus_read_config_dword( projection bus *  bus,
			unsigned int  devfn, int  pos, unsigned int* [out] value ) {
		projection < struct pci_bus > bus {
		}
	}
}
