module marshal_test {
	projection <struct b_struct> nested_proj {
		int [out] a;
	}

	projection <struct a_struct> callee_proj {
		unsigned [in] a;
		projection nested_proj [out, bind(callee)] * b;

		// [bind(callee)] is formally undefined in marshaling right now
		// You need to explicitly specify in or out, or it might not behave the way you expect it to
	}

	projection <struct c_struct> caller_proj {
		unsigned [in] a;
		projection nested_proj [in, bind(caller)] * b;
	}

	rpc void pass_callee_bind_pointer(projection callee_proj [bind(callee)] * caller_pointer);
	rpc void pass_caller_bind_pointer(projection caller_proj [bind(caller)] * callee_pointer);
	
	// Behavior with plain annotations (bind, as opposed to bind(caller)),
	// are ucrrently undefined, since it's not wholly clear what the semantics are
	// TODO: will be fixed

	// What is defined:
	// - [(in | out), (some other annotation)]
	// - [(in | out | (in, out))]
	// - 
	// TODO: add compiler pass to detect the weird stuff
}